<%
/* 
 *  This file is part of the SPP(Superpolo Platform).
 *  Copyright (C) by SanPolo Co.Ltd.
 *  All rights reserved.
 *
 *  See http://spp.spolo.org/ for more information.
 *
 *  SanPolo Co.Ltd
 *  http://spp.spolo.org/
 *  Any copyright issues, please contact: copr@spolo.org
 */
 
 
 /*本文件维护了response的辅助方法。
 
 如下全局变量被定义和使用:
 GVAR_LoadLibrary : 必须被设置，否则视同直接从客户端访问。这将直接返回空。
 
 使用方法:
 <code>

	var GVAR_LoadLibrary = true;
	load("/apps/util/response.esp");
	//下载指定文件。
	GVAR_response.download({
		bcgi : "bcgi path",
		cache : "cache file path ", //相对于当前节点的cache目录.
		node(optional) : 指定节点，如果不指定，则为当前节点.
		zipname(optional) : 指定zip名称，如果不指定，则为node["resourceName"].
	});
 </code>
*/

response.setCharacterEncoding("UTF-8");

load("/apps/util/sysconfig.esp");
load("/apps/util/blendercgi.esp");

var GVAR_response;
(function()
{
	/// @brief 支持断点续传。
	if( !GVAR_response && GVAR_LoadLibrary )
	{
		GVAR_response = {};
		GVAR_response.download = function(option)
		{
			if(!option || !option.bcgi || !option.cache)
			{
				throw("invalid usage GVAR_response.download");
				return false;
			}
			
			var node = currentNode;
			if(option.node)
				node = option.node;
			var zipName;
			if(option.zipname)
			{
				zipName = option.zipname;
			}else{
				zipName = node['resourceName'];
			}
			if(!zipName) zipName="unamed";
         
         var attach = true;
         if(!option.attach)
         {
            attach = false;
         }
			
			//对zipName做编码处理。
			zipName = new Packages.java.net.URLEncoder.encode(zipName, "UTF-8")

			//获取nodePath并保存.
			var nodePath = GVAR_system.getNodePath(node,true);
			//获取cache路径。
			var cachePath = nodePath + GVAR_system.path_separator + "cache";
			//确保cache路径存在，以方便后续处理正确。
			var cacheDir = new Packages.java.io.File(cachePath);
			
			//如果有version信息设置回滚到指定version 
			var targetVersion = option.version;
			var currentVersion;
			if(currentNode.hasProperty("CurrentVersion")){
				currentVersion = currentNode.getProperty("CurrentVersion").getString();
			}
			var needRestore = false;
			if(currentVersion && targetVersion && targetVersion != currentVersion){
				needRestore = true;
				load("/apps/util/history.esp");
				var reversion_result = GVAR_Git_History.reVersion({version:targetVersion});
				reversion_result = eval('('+reversion_result+')');
				if(reversion_result.success == "false"){
					//如果失败，输出失败信息，return false
					Packages.java.lang.System.out.println("GVAR_response.download :reversion to "+targetVersion+" failed!");
					Packages.java.lang.System.out.println(reversion_result.info);
					throw(reversion_result.info);
					return false;
				}else{
					//如果成功，需要删除缓存文件夹
					Packages.org.apache.commons.io.FileUtils.deleteDirectory(cacheDir);
				}
			}
			
			if(!cacheDir.exists())
			{
				cacheDir.mkdirs();
			}

			var fileCachePath = cachePath + GVAR_system.path_separator + option.cache;
			var fileCacheFile = new Packages.java.io.File(fileCachePath);
			//如果缓冲文件不存在。通过forward构建之。
			if(!fileCacheFile.exists())
			{
				var opt = option.forward;
				if(!opt) opt = {};
				opt.cgi = option.bcgi;
				
				if(opt.env == undefined)
				{
					opt.env = option.env;
				}
				
				stdout = GVAR_bcgi.forward(opt);
			}

			//开始将正文定向回客户端。
			if(fileCacheFile.exists())
			{
							//开始设置回应的报文头。
				response.setContentType("application/zip");
				 if(attach)
				 {
					response.setHeader("Content-Disposition", "attachment; filename=\"" + zipName + ".zip\"");
				 }
				response.setHeader("content-length", fileCacheFile.length());
				var inputstream = new Packages.java.io.FileInputStream(fileCacheFile);
				var outputStream = response.getOutputStream()
				Packages.org.apache.commons.io.IOUtils.copyLarge(inputstream,outputStream);		
				inputstream.close();
				outputStream.close();

				//恢复到原先的版本
				if(needRestore){
					GVAR_Git_History.reVersion({version:currentVersion});
					Packages.org.apache.commons.io.FileUtils.deleteDirectory(cacheDir);
				}

				return true;
			}
			return false;
		};
	}
	
}());

%>