<%
/**
 *  This file is part of the spp(Superpolo Platform).
 *  Copyright (C) by SanPolo Co.Ltd.
 *  All rights reserved.
 *
 *  See http://www.spolo.org/ for more information.
 *
 *  SanPolo Co.Ltd
 *  http://www.spolo.org/
 *  Any copyright issues, please contact: copr@spolo.org
**/

response.setCharacterEncoding("UTF-8");
 
//加载node处理库
	load("/apps/util/node.esp");


//获取并设置所需全局变量
	var GVAR_CurrentNode;
	var GVAR_Session;
	var GVAR_WorkSpace;
	var GVAR_RootNode;
	var GVAR_COUNT;

	GVAR_CurrentNode = currentNode;
	GVAR_Session = currentNode.getSession();
	GVAR_WorkSpace = GVAR_Session.getWorkspace();
	GVAR_RootNode = GVAR_Session.getRootNode();
	GVAR_COUNT = 0;
	
	
	//根据diffuse图名称找到其相应材质
	function getmat_by_diffuse(diffusename,cnode)
	{
		//根据当前节点获取其model节点
		var modelnode = cnode;
		while(1)
		{
			modelnode = modelnode.getParent();
			if((modelnode == null) || (modelnode == undefined))
			{
				return null;
			}
			if(modelnode["sling:resourceType"] == "model")
			{
				break;
			}
		}
		
		//遍历model节点下所有节点获取其材质节点
		var matmap = [];
		
		//需要返回的结果数组
		var retmats = [];
		
		//获取所有mat节点
		getmatnode(modelnode,matmap);
		
		for(var i in matmap)
		{
			var imat = matmap[i];
			
			//获得当前材质节点父节点
			var parmat = imat.getParent();
			
			//遍历父级节点下所有子节点获取其texture节点
			for(var ip in parmat.getNodes())
			{
				var ipnode = parmat.getNodes()[ip];
				if(ipnode["sp:Tag"] == "ImageTexture")
				{
					var diffurl = ipnode["url"];
					var diffname = diffurl.substr(diffurl.lastIndexOf("/") + 1,diffurl.length - 1);
					if(diffname == diffusename)
					{
						retmats[i] = imat;
					}
				}
			}
		}		
		
		return retmats;
	}
	
	//获取模型节点下所有的材质节点
	function getmatnode(modelnode,matmap)
	{
		if(modelnode.hasNodes())
		{
			for(var nodeindex in modelnode.getNodes())
			{
				var inode = modelnode.getNodes()[nodeindex];
				if((inode["sp:Tag"] == "Material") && (inode["USE"] == null))
				{
					matmap[inode.name] = inode;
				}
				if(inode.hasNodes())
				{
					getmatnode(inode,matmap);
				}
			}
		}
		
	}
	
	
	function automask(cnode)
	{
		//判断节点是否为空
		if(cnode != null)
		{
			
			//获取当前model节点
			var modelnode = cnode;
			while(1)
			{
				modelnode = modelnode.getParent();
				if(modelnode["sling:resourceType"] == "model")
				{
					break;
				}
			}
			
			//获取当前所有material节点
			var matmap = [];
			getmatnode(modelnode,matmap);
			
			//遍历一级材质节点下所有diffuse节点
			for(var i in cnode)
			{
				//判断子节点类型
				if(cnode[i]["sling:resourceType"] == "diffuse")
				{
					var diffnode = cnode[i];
					var diffusename = "";
					
					
					//删除已经生成的一级材质ocm文件
					// if(diffnode["l1mat.ocm"] != null)
					// {
						// diffnode["l1mat.ocm"].remove();
						// diffnode.save();
					// }
					
					//遍历diffuse节点的所有子节点
					for(var im in diffnode)
					{
						//out.write(diffnode.getNodes().length + "\n");
						//获取mask节点
						var masknode = diffnode[im];
						
						//判断节点类型是否为mask
						if(masknode["sling:resourceType"] == "mask")
						{
							
							//获取diffusename
							diffusename =masknode["diffuseName"];
						}
						else
						{
							continue;
						}
					}
					

					
					//根据diffusename获取所有相关material节点
					if(diffusename != "")
					{
						var matnode = getmat_by_diffuse(diffusename,cnode);
						
						//判断获取的material节点集合是否为空
						if(matnode != null)
						{
							//遍历所有的material节点
							for(var i in matnode)
							{
								// out.println(i);
								delete matmap[i];
							}
					
						}
					}	
				}
			}
			
			var matmapisnull = true;
			
			for(var i in matmap)
			{
				matmapisnull = false;
			}
			
			if(!matmapisnull)
			{
				// out.println("create automask!");
				
				for(var i in matmap)
				{
					var automaskdiffuse = cnode[i];
					if(automaskdiffuse != null)
					{
						automaskdiffuse.remove();
						cnode.save();
					}
					
					automaskdiffuse = cnode.addNode(i, "sling:Folder");
					cnode.save();
					automaskdiffuse.setProperty("sling:resourceType","diffuse");
					automaskdiffuse.setProperty("sp:isauto", "true");
					automaskdiffuse.save();
					var matnode = matmap[i];
					var diffname = "";
					//获得当前材质节点父节点
					var parmat = matnode.getParent();
					
					//遍历父级节点下所有子节点获取其texture节点
					for(var ip in parmat.getNodes())
					{
						var ipnode = parmat.getNodes()[ip];
						if(ipnode["sp:Tag"] == "ImageTexture")
						{
							var diffurl = ipnode["url"];
							diffname = diffurl.substr(diffurl.lastIndexOf("/") + 1,diffurl.length - 1);
							
						}
					}
					
					if(diffname != "")
					{
						automaskdiffuse.setProperty("sp:hasdiffuse", "true");
					}
					else
					{
						automaskdiffuse.setProperty("sp:hasdiffuse", "false");
					}
					
					automaskdiffuse.save();
					
					var masknode = automaskdiffuse.addNode(i, "sling:Folder");
					automaskdiffuse.save();
					masknode.setProperty("sling:resourceType", "mask");
					masknode.setProperty("sp:isauto", "true");
					masknode.setProperty("matpath", String(matmap[i]));
					masknode.setProperty("maskName",i);
					masknode.setProperty("diffuseName",diffname);
					masknode.setProperty("modelName",modelnode["name"]);
					masknode.setProperty("componentName",String(modelnode["name"]) + "_" + i);
					masknode.save();
					
				}
			}
		}
	}
	
	automask(currentNode);
%>