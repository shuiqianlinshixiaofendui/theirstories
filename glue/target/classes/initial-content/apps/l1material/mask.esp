<%
	/* 
	 *  This file is part of the SPP(Superpolo Platform).
	 *  Copyright (C) by SanPolo Co.Ltd.
	 *  All rights reserved.
	 *
	 *  See http://spp.spolo.org/ for more information.
	 *
	 *  SanPolo Co.Ltd
	 *  http://spp.spolo.org/
	 *  Any copyright issues, please contact: copr@spolo.org
	 */
	 
	 //处理上传上来的mask图，产生mask节点
 
 
	load("/apps/util/node.esp");

	var GVAR_CurrentNode;
	var GVAR_Session;
	var GVAR_WorkSpace;
	var GVAR_RootNode;
	var GVAR_COUNT;

	GVAR_CurrentNode = currentNode;
	GVAR_Session = currentNode.getSession();
	GVAR_WorkSpace = GVAR_Session.getWorkspace();
	GVAR_RootNode = GVAR_Session.getRootNode();
	GVAR_COUNT = 0;
 

	out.write("test mask!!!\n");
	if(currentNode != null)
	{
		out.write(currentNode);
		
		//获得model node
		var modelnode = currentNode.getParent();
		var modelname = "";
		if(modelnode != null)
		{
			modelname = modelnode.getName();
		}
		out.write(modelnode);
		var tmpnode = currentNode["tmp"];

		if(tmpnode != null)
		{
			for(var idn in tmpnode)
			{
				var matxmlnode = null;
				//获取xml节点
				var dnode = tmpnode[idn];
				if(dnode != null)
				{
					for(var im in dnode)
					{
						var imnode = dnode[im];
						if(imnode != null)
						{	
							if(imnode.name == "mat.xml")
							{
								matxmlnode = imnode;
							}
								
						}
					}
					if(matxmlnode != null)
					{
						out.write(matxmlnode + "\n");
						//获取xml文件节点
						var matxmlfile = matxmlnode["jcr:content"]["jcr:data"];
						
						//解析xml文件
						var factory = new Packages.javax.xml.parsers.DocumentBuilderFactory.newInstance();
						var builder = factory.newDocumentBuilder();
						var matxml = builder.parse(matxmlfile);
						
						//获取xml文件中所有的mask节点
						var masks = matxml.getElementsByTagName("mask");
						var L1mat_Dnode = currentNode[dnode["name"]];
						
						if(L1mat_Dnode != null)
						{
							L1mat_Dnode.remove();
						}
						currentNode.save();
						
						L1mat_Dnode = currentNode.addNode(String(dnode["name"]),"sling:Folder");
						L1mat_Dnode.setProperty("sling:resourceType","diffuse");
						currentNode.save();
						
						for(var imas = 0; imas < masks.length; imas++)
						{
							//根据xml中信息获取相应mask图的节点
							var imnode = masks.item(imas);
							var imname = imnode.getAttribute("name");
							var imdiffuseName = imnode.getAttribute("diffuseName");
							var imcomponentName = imnode.getAttribute("componentName");
							
							out.write(imname + "\n");
							var masknode = dnode[imname];
							out.write(masknode + "\n");
							
							L1mat_Dnode.addNode(masknode.name,"sling:Folder");
							L1mat_Dnode[masknode.name].setProperty("sling:resourceType","mask");
							L1mat_Dnode[masknode.name].setProperty("maskName",imname);
							L1mat_Dnode[masknode.name].setProperty("diffuseName",imdiffuseName);
							L1mat_Dnode[masknode.name].setProperty("modelName",modelname);
							L1mat_Dnode[masknode.name].setProperty("componentName",imcomponentName);
							
							
							currentNode.save();
							
							GVAR_WorkSpace.copy(masknode.getPath(), L1mat_Dnode.getPath() + '/' + masknode.name+ '/maskfile');
							
							var L1mat_masknode = L1mat_Dnode[masknode.name];
							
							currentNode.save();
							//L1mat_masknode.setProperty("sling:resourceType","mask");
							
						}
					}
				}

				
			}
		}
	
	}
 %>