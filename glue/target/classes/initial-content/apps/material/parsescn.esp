<%
/**
 *  This file is part of the spp(Superpolo Platform).
 *  Copyright (C) by SanPolo Co.Ltd.
 *  All rights reserved.
 *
 *  See http://www.spolo.org/ for more information.
 *
 *  SanPolo Co.Ltd
 *  http://www.spolo.org/
 *  Any copyright issues, please contact: copr@spolo.org
**/

response.setCharacterEncoding("UTF-8");

load("/apps/material/defaultMatTypeCfg.esp");
load("/apps/material/SLG_mat_template.esp");

//获取并设置所需全局变量
var GVAR_CurrentNode;
var GVAR_Session;
var GVAR_WorkSpace;
var GVAR_RootNode;
var GVAR_COUNT;

GVAR_CurrentNode = currentNode;
GVAR_Session = currentNode.getSession();
GVAR_WorkSpace = GVAR_Session.getWorkspace();
GVAR_RootNode = GVAR_Session.getRootNode();
GVAR_COUNT = 0;

out.write("parsescn begin!!!\n");

//获取slg scn file 节点
var scn_node = currentNode["slg"].getNodes()[0];

if(scn_node != null)
{
	out.write("scn_node:" + scn_node + "\n");
}

function slgMaterialsHandler(matType,matName,value){
	var matnode = currentNode;
	
	if((matName != "null") && (matType != "null") && (matnode != null))
	{
		vals = value.split(' ').slice(2);
		switch(matType)
		{
			case "matte" :{
			
				// <R> <G> <B>
				diffuseNodeCfg.implement.value = vals[0] + " " + vals[1] + " " + vals[2];
				
				break;
			}
			case "light" :{
			
				// <Gain R> <Gain G> <Gain B>
				diffuseNodeCfg.implement.value = vals[0] + " " + vals[1] + " " + vals[2];
				
				break;
			}
			case "mirror" :{ 
				
				// <Reflected R> <Reflected G> <Reflected B>
				reflectionNodeCfg.implement.value = vals[0] + " " + vals[1] + " " + vals[2];
				
				// <1 => Enable, 0 => Disable specular reflections>
				specularNodeCfg.implement.value = vals[3];
				
				break;
			}
			case "mattemirror" :{
			
				// <R> <G> <B>  
				diffuseNodeCfg.implement.value = vals[0] + " " + vals[1] + " " + vals[2];
				
				// <Reflected R> <Reflected G> <Reflected B>
				reflectionNodeCfg.implement.value = vals[3] + " " + vals[4] + " " + vals[5];
				
				// <1 => Enable, 0 => Disable specular reflections>
				specularNodeCfg.implement.value = vals[6];

				break;
			}
			case "glass" :{
			
				// <Transmitted R> <Transmitted G> <Transmitted B>    
				transmissionNodeCfg.implement.value = vals[0] + " " + vals[1] + " " + vals[2];
		
				// <Reflected R> <Reflected G> <Reflected B>
				reflectionNodeCfg.implement.value = vals[3] + " " + vals[4] + " " + vals[5];

				// <outside Index of Refraction> 				
				outside_index_of_refractionNodeCfg.implement.value = vals[6]; 
				
				// <inside Index of Refraction>
				inside_index_of_refractionNodeCfg.implement.value = vals[7]; 
				
				// <1 => Enable, 0 => Disable specular reflections>
				specularNodeCfg.implement.value = vals[8]; 
				
				// <1 => Enable, 0 => Disable specular transmissions>
				specular_transmissionsNodeCfg.implement.value = vals[9]; 
				
				break;
			}
			case "metal" :{
			
				// <Reflected R> <Reflected G> <Reflected B>  
				reflectionNodeCfg.implement.value = vals[0] + " " + vals[1] + " " + vals[2];
				
				// <Exponent>
				exponentNodeCfg.implement.value = vals[3];			
				
				// <1 => Enable, 0 => Disable specular reflections>
				specularNodeCfg.implement.value = vals[4];	
				
				break;
			}
			case "mattemetal" :{
			
				// <R> <G> <B>   
				diffuseNodeCfg.implement.value = vals[0] + " " + vals[1] + " " + vals[2];
				
				// <Reflected R> <Reflected G> <Reflected B>
				reflectionNodeCfg.implement.value = vals[3] + " " + vals[4] + " " + vals[5];
				
				// <Exponent>
				exponentNodeCfg.implement.value = vals[6];
				
				// <1 => Enable, 0 => Disable specular reflections>
				specularNodeCfg.implement.value = vals[7];
				
				break;
			}
			case "archglass" :{
			
				// <Reflected R> <Reflected G> <Reflected B>
				reflectionNodeCfg.implement.value = vals[0] + " " + vals[1] + " " + vals[2];
				
				// <Transmitted R> <Transmitted G> <Transmitted B>
				transmissionNodeCfg.implement.value = vals[3] + " " + vals[4] + " " + vals[5];
				
				// <1 => Enable, 0 => Disable specular reflections>
				specular_reflectionsNodeCfg.implement.value = vals[6];
				
				// <1 => Enable, 0 => Disable specular transmissions>
				specular_transmissionsNodeCfg.implement.value = vals[7];

				break;
			}
			case "alloy" :{
			
				// <R> <G> <B>  
				diffuseNodeCfg.implement.value = vals[0] + " " + vals[1] + " " + vals[2];
				
				// <Reflected R> <Reflected G> <Reflected B>
				reflectionNodeCfg.implement.value = vals[3] + " " + vals[4] + " " + vals[5];
				
				// <Exponent>
				exponentNodeCfg.implement.value = vals[6];
				
				// <Schlick term> 
				schlick_termNodeCfg.implement.value = vals[7];
				
				// <1 => Enable, 0 => Disable specular reflections>
				specularNodeCfg.implement.value = vals[8];
			
				break;
			}
			default:
				out.write("Error: Unknown slg mat " + matType + "!\n");
		}
		createmat(matnode,matName,matType);
	}
	else
	{
		//返回错误说明
		out.write("Parameter error!\n");
	}
}
function parseSlgScn(scn_data) {
	var lines = scn_data.split('\n');
	
	for(var i = 0;i < 1; i++){
		out.write("line " + i + " = " + lines[i] + "\n");
		var equation = lines[i].split('=');
		
		var key = equation[0];
		var value = equation[1];
		
		var labels = key.split('.');
		switch(labels[1])
		{
			case "camera":{
				out.write("file format error " + equation +"\n" );
				break;
			}
			case "objects":{
				out.write("file format error " + equation +"\n" );
				break;
			}
			case "materials":{
				slgMaterialsHandler(labels[2], labels[3], value);
				break;
			}
			default:
				out.write("file format error line " + i +"\n" );
		}
	}
}

function toString(txt_node){
	var stream = txt_node["jcr:content"]["jcr:data"];
	var string = new Packages.org.apache.commons.io.IOUtils.toString(stream);
	return new String(string);
}

//获取slg scn文件的数据
var scn_data = toString(scn_node);
parseSlgScn(scn_data);

// scene.materials.mattemirror.lampshades =  0.85 0.85 0.85 0.5 0.5 0.5 0