<%
/* 
 *  This file is part of the SPP(Superpolo Platform).
 *  Copyright (C) by SanPolo Co.Ltd.
 *  All rights reserved.
 *
 *  See http://spp.spolo.org/ for more information.
 *
 *  SanPolo Co.Ltd
 *  http://spp.spolo.org/
 *  Any copyright issues, please contact: copr@spolo.org
*/
response.setCharacterEncoding("UTF-8");

//该方法用于查询模型库(个人模型库和公共模型库)下的所有模型，并返回json对象

var GVAR_LoadLibrary = true;
load("/apps/util/sysconfig.esp");
load("/apps/util/file.esp");

var language = request.getParameter("language");
var expression = request.getParameter("expression");
var characterEncoding = request.getCharacterEncoding();
expression =  Packages.org.apache.commons.io.IOUtils.toString(expression.toString().getBytes(characterEncoding), 'utf-8');

var str = expression;
if(str.indexOf("@areaPath")>0){
    var tagstr = "jcr:like(fn:lower-case(@areaPath),\"%";
    var start = str.indexOf(tagstr);
    var str1 = str.substring(start+tagstr.length);
    var nodePath = str1.split("%")[0];
    
    var substr1 = str.substring(0,start);
    var substr2 = "";
    var end = parseInt(start)+parseInt(tagstr.length)+parseInt((nodePath+"").length)+3;
    var substr3 = str.substring(end);
    
    var GVAR_CurrentNode = currentNode;
    var GVAR_Session = GVAR_CurrentNode.getSession();
    var GVAR_RootNode = GVAR_Session.getRootNode();
    var targetNode = GVAR_RootNode.getNode(nodePath.substr(1));
    var max = targetNode.getProperty("max");
    var min = targetNode.getProperty("min");
    substr2 += "@area <='"+ max +"' and @area >= '"+ min+"'";
    expression = substr1+substr2+substr3;
}
Packages.java.lang.System.out.println(expression);

var limit = request.getParameter("limit");
var offset = request.getParameter("offset");
var isiframe = request.getParameter("isiframe");
//var language = "xpath";
//var expression = "/jcr:root/content/modellib//*[@sling:resourceType = 'model']";
// var limit = 1;
// var offset = 0;/////
var res = query(language, expression,limit,offset);

if(!isiframe){
	out.print(res);
}else{
	// response.setContentType("text/html");
	// out.println("<html><body> ");
	// out.println("<textarea>");
	// out.println(res);
	// out.println("</textarea>");
	// out.println("</body></html>");
	out.println("callback("+res+");");
}
//Packages.java.lang.System.out.println("Notify client msg = " + res);
function totalNum(language,expression)
{
	if(!language || !expression)
	{
		out.print("{\"error\":\"language or expression is undefined!\"}");
		return "";
	}
	var qry,result;
	var queryManager = currentNode.getSession().getWorkspace().getQueryManager();
	qry = queryManager.createQuery(expression,language);
	
	try{
		result = qry.execute().getNodes();
	}
	catch(e){
		out.println("{error:'query.execute() error!'}");
	}
	
	var node;
	var count = 0;
	
	while(result.hasNext()){
		node = result.nextNode();
		count ++;
	}
	return count;
}
//添加场景格式属性
function addFormat(node){

    // path = GVAR_File.getFile(path);
    var dpath = GVAR_system.getNodePath(node,false);
    dpath = dpath + GVAR_system.path_separator + "data";
    var dataDir = GVAR_File.getDirectory(dpath);
    var list = GVAR_File.listFiles(dataDir,"*.blend",true);
    // out.println("---listlength---"+list.length );
    
    
    var emptySceneSize = 433580;
    var flag = false;
    var json = "\"format\":\"";
    if(list.length > 0){
        for(var j=0;j<list.length;j++){
            var cnode = GVAR_File.getFile(list[j]);
            var size = cnode.length();
            if(size != emptySceneSize){
                if(flag){
                    json += " ";
                }
                json += "blend";
                flag = true;
            }
        }
    }
    
    list = GVAR_File.listFiles(dataDir,"*.max",true);
    if(list.length > 0){
        if(flag){
            json += " ";
        }
        json += "max";
        flag = true;
    }
    
    list = GVAR_File.listFiles(dataDir,"*.obj",true);
    if(list.length > 0){
        if(flag){
            json += " ";
        }
        json += "obj";
        flag = true;
    }
    json += "\" ";
    flag = false;
    return json;
}
function query(language, expression,limit,offset){
	if(!language || !expression){
		out.print("{\"error\":\"language or expression is undefined!\"}");
		return "";
	}
	
	var qry,result;
	var queryManager = currentNode.getSession().getWorkspace().getQueryManager();
	qry = queryManager.createQuery(expression,language);
	if(limit!="-1")
		qry.setLimit(limit);
	if(offset !="-1")	
		qry.setOffset(offset);
	
	try{
		result = qry.execute().getNodes();
	}
	catch(e){
		out.println("{error:'query.execute() error!'}");
	}
	
	var node, properties, nodeJson;
	var total = totalNum(language,expression);
	var json = "{";
	json += "\"totalNum\":"+total+",";
	json += "\"data\":{";
	if(result.hasNext()){
		while(result.hasNext()){
			node = result.nextNode();
			if(node.getName()=="rep:policy"){
				continue;
			}
			properties = node.getProperties();
			json += "\""+node.getPath()+"\":{";
			json += "\"nodeName\":\"" + node.getName() + "\","
			for(var i in properties){
				json += "\""+ i +"\":";
				json += "\""+ properties[i].toString() +"\",";
			}
            var format = addFormat(node);
            json += format;
			json = json.substring(0,json.length-1);
			json += "},"
		}
		if(json.length>1){
			if(total == 0){
				json = json.substring(0,json.length);
			}
			else{
				json = json.substring(0,json.length-1);
			}
		}
	}
	json += "}";
	json += "}";
	return json;
}
%>