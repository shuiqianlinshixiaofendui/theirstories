<%
/**
 *  This file is part of the spp(Superpolo Platform).
 *  Copyright (C) by SanPolo Co.Ltd.
 *  All rights reserved.
 *
 *  See http://www.spolo.org/ for more information.
 *
 *  SanPolo Co.Ltd
 *  http://www.spolo.org/
 *  Any copyright issues, please contact: copr@spolo.org
**/
response.setCharacterEncoding("UTF-8");
var GVAR_LoadLibrary = true;
load("/apps/util/sysconfig.esp");
load("/apps/util/blendercgi.esp");
load("/apps/util/file.esp");
load("/apps/util/blendercgi.esp");

//********************************************************************************************
/**找到目标文件
*/
function findTargetFiles(node,suffix){
	var nodepath = GVAR_system.getNodePath(node,true);
	var cachePath = nodepath + GVAR_system.path_separator + "cache";
	var dataPath = nodepath + GVAR_system.path_separator + "data";
	var diffusePath = dataPath + GVAR_system.path_separator + "diffuse";
	var spmPath = dataPath + GVAR_system.path_separator + "spm";
	//缓存路径
	var cacheDir = new Packages.java.io.File(cachePath);
	//数据路径
	var dataDir = new Packages.java.io.File(dataPath);
	//贴图目录
	var diffuseDir = new Packages.java.io.File(diffusePath);
	//spm目录
	var spmDir = new Packages.java.io.File(spmPath);
	//查找到的文件集合
	var fileCollection;
	//查找对应的模型资源文件
	if(suffix == "max"){
		fileCollection = Packages.org.apache.commons.io.FileUtils.listFiles(dataDir,[suffix],false);
	}else if(suffix == "sh3f"){
		fileCollection = Packages.org.apache.commons.io.FileUtils.listFiles(dataDir,[suffix],true);
		if(fileCollection.isEmpty()) {
			fileCollection = Packages.org.apache.commons.io.FileUtils.listFiles(dataDir,["sh3d"],true);
		}
	}else if(suffix == "obj"){
		if(!cacheDir.exists()){
			cacheDir.mkdirs();
		}
		fileCollection = Packages.org.apache.commons.io.FileUtils.listFiles(cacheDir,[suffix],false);
        var modelname = node["resourceName"] || node.getName();
		if(fileCollection.isEmpty()){
			var opt = {useEmptyBlend : false};
			opt.cgi = "model/obj_export.py";
			opt.node = node;
            opt.env = {"modelname":modelname};
			GVAR_bcgi.forward(opt);
			//修改main.obj的文件名称
			var objFile = new Packages.java.io.File(cacheDir.getPath()+GVAR_system.path_separator+"main.obj");
			if(objFile.exists()){
				var targetFile = new Packages.java.io.File(cacheDir.getPath()+GVAR_system.path_separator+modelname+".obj");
				objFile.renameTo(targetFile);
			}
		}
		fileCollection = Packages.org.apache.commons.io.FileUtils.listFiles(cacheDir,[suffix,"mtl"],false);
	}else if(suffix == "blend"){
		fileCollection = Packages.org.apache.commons.io.FileUtils.listFiles(dataDir,[suffix],false);	
	}
	if(!fileCollection.isEmpty() && diffuseDir.exists()){
		fileCollection.add(diffuseDir);
	}
	if(!fileCollection.isEmpty() && spmDir.exists()){
		fileCollection.add(spmDir);
	}

	return fileCollection;
}
/**copy文件到目标目录
*/
function copyTODir(dir,files){
	for(var index=0;index<files.length;index++){
		var file = files[index];
		if(file.isDirectory()){
			Packages.org.apache.commons.io.FileUtils.copyDirectoryToDirectory(file,dir);
		}else{
			Packages.org.apache.commons.io.FileUtils.copyFileToDirectory(file,dir);
		}
	}
}
/**7z压缩
*/
function zipFiles(zipfile,folder){
	GVAR_system.runTool("7za", ["a -tzip "+zipfile.getPath()," " + folder.getPath() + GVAR_system.path_separator +"*"]);	
}
//********************************************************************************************

//获取header中的File_Type信息
var fileTypes = request.getParameter("fileformat");
//根据header中的File_Type信息生成后缀
var file_suffixes = [];
if(fileTypes){
	fileTypes = fileTypes.split(",");
	for(var index=0;index<fileTypes.length;index++){
		var suffix = fileTypes[index];
		if(suffix == "sh3f") {
			file_suffixes.push("sh3f");
		}else if(suffix == "max"){
			file_suffixes.push("max");
		}else if(suffix == "obj"){
			file_suffixes.push("obj");
		}else if(suffix == "blend"){
			file_suffixes.push("blend");
		}
	}
}
if(file_suffixes.length==0){
	file_suffixes.push("obj");
}
//获取参数model得到模型的jcr路径
var models = request.getParameter("models");
try{
	models = new Packages.org.apache.sling.commons.json.JSONArray(models);
}catch(e){
	models = false;
	Packages.java.lang.System.out.println(e);
	response.sendError(400,"Bad Request.request parameter \"models\" wrong");
}
if(models){
	//创建临时目录，生成临时zip文件
	var tempDir = GVAR_File.createTempFolder(GVAR_system.getNodePath(currentNode,true));
	//创建临时文件夹来保存目录结构，用于统一压缩
	var tempFolder = new Packages.java.io.File(tempDir.getPath()+GVAR_system.path_separator+"models");
	tempFolder.mkdirs();
	//输出zip路径
	var zipPath = tempDir.getPath()+"/"+"models.zip";
	var zipFile = new Packages.java.io.File(zipPath);
	//创建错误信息临时文件
	var errorFile = Packages.java.io.File.createTempFile("ERROR",".txt",tempDir);
	var errorInfos = new Packages.java.util.Vector();
	//获取jcr session
	var session = currentNode.getSession();
	for(var index = 0;index < models.length();index++){
		var model_jcr_path;
		var amount;
		var modelInfo;
		try{
			modelInfo = models.getJSONObject(index); 
			model_jcr_path = modelInfo.getString("path");
			if(modelInfo.has("amount")){
				amount = modelInfo.getInt("amount");
			}
		}catch(e){
			var error = '[ERROR]:request parameter "models" wrong, models['+index+']:"'+e.message+'"';
			errorInfos.add(error);
		}
		var node = null;
		try{
			node = session.getNode(model_jcr_path);
		}catch(e){
			Packages.java.lang.System.out.println(e);
		}
		//如果node正确存在
		if(node){
			var fileCollection;
			//按后缀优先级顺序查找一个模型的资源文件
			for(var suffixes_index = 0;suffixes_index<file_suffixes.length;suffixes_index++){
				try{
					fileCollection = findTargetFiles(node,file_suffixes[suffixes_index]);
				}catch(e){
					Packages.java.lang.System.out.println(e);
					var error = '[ERROR]:method findTargetFiles() throw Exception : '+e.message;
					errorInfos.add(error);
				}
				if(fileCollection && !fileCollection.isEmpty()){
					break;
				}
			}

			//如果fileCollection是空的，说明没有按要求找到对应的资源文件
			if(fileCollection && !fileCollection.isEmpty()){
				var dirName = node.getName();
				var modelDir = new Packages.java.io.File(tempFolder.getPath()+GVAR_system.path_separator+dirName);
				if(!modelDir.exists()){
					modelDir.mkdirs();
				}
				var files = fileCollection.toArray();
				copyTODir(modelDir,files);
				//保存模型信息，用来打包到zip
				if(modelInfo){
					var infoFile = new Packages.java.io.File(modelDir.getPath()+GVAR_system.path_separator+"info.json");
					infoFile.createNewFile();
					Packages.org.apache.commons.io.FileUtils.writeStringToFile(infoFile,modelInfo.toString(),"UTF-8");
				}
			}else{
				//写入错误信息
				var error = '[ERROR]:can not find model resource ===>"'+model_jcr_path+'"';
				errorInfos.add(error);
			}		
		}else{
			//写入错误信息
			var error = '[ERROR]:node "'+model_jcr_path+'" not exists!';
			errorInfos.add(error);
		}
	}
	//将错误信息文件errorFile放入临时文件准备压缩
	Packages.org.apache.commons.io.FileUtils.writeLines(errorFile,"UTF-8",errorInfos);
	copyTODir(tempFolder,[errorFile]);
	//压缩
	zipFiles(zipFile,tempFolder);
	//将zip文件写入响应流
	response.setContentType("application/zip");
	response.setHeader("Content-Disposition", "attachment; filename=\"models.zip\"");
	var inputstream = new Packages.java.io.FileInputStream(zipFile);
	Packages.org.apache.commons.io.IOUtils.copyLarge(inputstream,response.getOutputStream());
	inputstream.close();
	//删除临时文件
	GVAR_File.deleteFile(tempDir);
}else{
	response.sendError(404);
}

%>