<%

/* 
 *  This file is part of the SPP(Superpolo Platform).
 *  Copyright (C) by SanPolo Co.Ltd.
 *  All rights reserved.
 *
 *  See http://spp.spolo.org/ for more information.
 *
 *  SanPolo Co.Ltd
 *  http://spp.spolo.org/
 *  Any copyright issues, please contact: copr@spolo.org
 */

response.setCharacterEncoding("UTF-8");
// out.println("test del");

var GVAR_LoadLibrary = true;
load("/apps/util/deletepreview.esp");

var jsonobj = new Packages.org.apache.sling.commons.json.JSONObject();

var nodespath = request.getRequestParameter("nodes");

nodespath = String(nodespath);

// out.println(nodespath);

var GVAR_Session;
var GVAR_WorkSpace;
var GVAR_RootNode;


var slingRepos = sling.getService(Packages.org.apache.sling.jcr.api.SlingRepository);
var adminSession = slingRepos.loginAdministrative(null);

GVAR_Session = adminSession;
GVAR_WorkSpace = GVAR_Session.getWorkspace();
GVAR_RootNode = GVAR_Session.getRootNode();

if(nodespath != "null")
{
	var nodespatharr = nodespath.split(",");
	for(var isn in nodespatharr)
	{
		// out.println(nodespatharr[isn]);
		var scnpath = nodespatharr[isn];
		if(scnpath[0] == "/")
		{
			scnpath = scnpath.substring(1,scnpath.length)
		}
		
		
		
		if(GVAR_RootNode.hasNode(scnpath))
		{
			var scnnode = GVAR_RootNode.getNode(scnpath);
			
			
			var previewnodes = scnnode.getNodes();
			
			for(var i = 0; i < previewnodes.length; i++)
			{

					var previewnode = previewnodes[i];
					
					var previewnodepaht = previewnode.getPath();
					
					if(previewnode["sling:resourceType"] == "preview")
					{
						try{
							del_preview(previewnode);
							jsonobj.put(previewnodepaht, "del");
						}
						catch(e)
						{
							jsonobj.put(previewnodepaht, e);
						}
					}
			}
			try
			{
				scnnode.remove();
				GVAR_Session.save();
				jsonobj.put(scnpath, "del");
			}
			catch(e)
			{
				jsonobj.put(scnpath, e);
			}
		}
	}
}

var jsonstring = jsonobj.toString();
	
response.setCharacterEncoding("UTF-8");
out.print(jsonstring);
response.flushBuffer();

%>