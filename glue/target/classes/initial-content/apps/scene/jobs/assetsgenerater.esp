<%
/* 
 *  This file is part of the SPP(Superpolo Platform).
 *  Copyright (C) by SanPolo Co.Ltd.
 *  All rights reserved.
 *
 *  See http://spp.spolo.org/ for more information.
 *
 *  SanPolo Co.Ltd
 *  http://spp.spolo.org/
 *  Any copyright issues, please contact: copr@spolo.org
 */
 
 
 /*本文件维护了response的辅助方法。
 
 如下全局变量被定义和使用:
 GVAR_LoadLibrary : 必须被设置，否则视同直接从客户端访问。这将直接返回空。
 
 使用方法:
 <code>

	var GVAR_LoadLibrary = true;
	load("/apps/scene/jobs/assetsgenerater.esp");
	//下载指定文件。
	GVAR_AssersGenerater.generate();
 </code>
*/

load("/apps/util/sysconfig.esp");
load("/apps/util/blendercgi.esp");

var GVAR_AssetsGenerater;
(function()
{
	if( !GVAR_AssetsGenerater && GVAR_LoadLibrary )
	{
		GVAR_AssetsGenerater = {};
		/**生成renderjob的资源文件
		*@param jobBaseInfo jsonObject对象，保存job的baseInfo
		*@param sceneNode 要渲染的场景的jcr节点对象
		*/
		GVAR_AssetsGenerater.generateRenderJobAssets = function(jobBaseInfo,sceneNode){	
			var result = false;
			var renderType = jobBaseInfo.getString("render");
			var target = jobBaseInfo.getString("target");
			var assetsPath = GVAR_system.getGlueSharePath() + jobBaseInfo.getString("assetsPath");
			var bcgi;
			var suffix;
			if(renderType=="octane"){
				bcgi = "scene/export_octanetopath.py";
				suffix = "ocs";
			}else if(renderType=="slg"){
				bcgi = "scene/export_slg.py";
				suffix = "cfg";
			}else{
				return result;
			}
			try{
				var assetsDir = GVAR_AssetsGenerater.generateDir(assetsPath,false);
					//生成资源文件				
					var opt = {};
					opt.cgi = bcgi;
					opt.node = sceneNode;
					opt.useEmptyBlend = false;
					opt.env = {};
					opt.env.LANG = "en_US.UTF-8";
					opt.env.target_type = target;
					opt.env.outpath = assetsPath;
					GVAR_bcgi.forward(opt);
				
				result = GVAR_AssetsGenerater.listFiles(assetsDir,[suffix]);
			}catch(e){
				Packages.java.lang.System.out.println(e);
			}
			return result;
		};
		/**通过json文件生成blender场景
		*@param String jsonPath json文件所在的位置
		*@param String destPath保存到的目标目录
		*/
		GVAR_AssetsGenerater.generateBlenderAssetsWithJson = function(jsonPath,destPath){
			var result = GVAR_bcgi.forward({
				cgi : "sweethome/create_scene.py", 
				useEmptyBlend : true,
				env : {
					"path": jsonPath,
					"dest": destPath 
				}
			});
			result = new Packages.org.apache.sling.commons.json.JSONObject(result);
			if(result.get("success")) {
				return new Packages.java.io.File(result.getString("path"));
			} 
			return null
		};
		/**copy资源文件到
		*@param jobBaseInfo jsonObject对象，保存job的baseInfo
		*@param sceneNode 要渲染的场景的jcr节点对象
		*/
		GVAR_AssetsGenerater.copyRenderJobAssets = function(zipFile,jobBaseInfo){
			var result = false;
			if(zipFile.exists()){
				var renderType = jobBaseInfo.getString("render");
				var suffix = "sps";
				if(renderType == "slg"){
					suffix = "cfg";
				}else if(renderType == "octane"){
					suffix = "ocs";
				}else if(renderType == "blender"){
					suffix = "blend";
				}
				var assetsFile = jobBaseInfo.getString("assetsFile");
				var assetsPath = GVAR_system.getGlueSharePath() + jobBaseInfo.getString("assetsPath");
				var assetsDir = new Packages.java.io.File(assetsPath);
				Packages.org.apache.commons.io.FileUtils.copyFileToDirectory(zipFile,assetsDir);
				//获取job的zip资源文件。
				var assetszipFilePath = assetsPath + GVAR_system.path_separator + assetsFile;
				var assetsZipFile = new Packages.java.io.File(assetszipFilePath);
				//解压zip文件
				result = GVAR_AssetsGenerater.uncompressZipFile(assetsZipFile,[suffix]);
			}
			return result;
		};
		/**生成一个Dir
		*@param path dir 的path
		*@param regenerate 如果存在是否重新生成路径
		*/
		GVAR_AssetsGenerater.generateDir=function(path,regenerate){
			var resultDir=new Packages.java.io.File(path);
			if(!resultDir.exists()){
				resultDir.mkdirs();
			}else if(regenerate){
				Packages.org.apache.commons.io.FileUtils.deleteDirectory(resultDir);
				resultDir.mkdirs();
			}
			return resultDir;
		};
		/**解压zip文件并返回解压完的一级目录中的文件名列表
		*@param zipFilePath zip的path
		* 解压到zip文件所在的路径下
		*/
		GVAR_AssetsGenerater.uncompressZipFile=function(zipFile,extensions){
		//	var uncompressSuccess = GVAR_system.uncompress(zipFile);
			var uncompressSuccess = GVAR_system.runTool("7za", ["x -aoa "+zipFile.getPath()," -o"+zipFile.getParent()]);
			if(uncompressSuccess.contains(new Packages.java.lang.String("ERROR"))){
				uncompressSuccess = false;
			}else{
				uncompressSuccess =true;
			}
			var result = false;
			if(uncompressSuccess){
				var dir=zipFile.getParentFile();
				result = GVAR_AssetsGenerater.listFiles(dir,extensions);								
			}
			return result;
		};
		/**在目录中查找指定后缀
		*@param dir 目录
		*@param extensions 详见org.apache.commons.io.FileUtils.listFiles api
		*/
		GVAR_AssetsGenerater.listFiles=function(dir,extensions){
			var result = false;
			if(dir.exists() && extensions){
				result = new Array();
				var fileCollection = Packages.org.apache.commons.io.FileUtils.listFiles(dir,extensions,true);
				var iterator = fileCollection.iterator();
				while(iterator.hasNext()){
					var file = iterator.next();
					var path = file.getPath();
					path = path.replace(GVAR_system.getGlueSharePath(),"");
					result.push(path);
				}
			}								
			return result;
		};
		/**设置一个camera被选中，用来渲染
		*@param cameraName 摄像机的名称
		*@param sceneNode 场景的jcr节点对象
		*/
		GVAR_AssetsGenerater.setCamera=function(cameraName,sceneNode){
			var nodePath = GVAR_system.getNodePath(sceneNode, false);
			var cachePath = nodePath + GVAR_system.path_separator + "cache";
			var cacheFile =  new Packages.java.io.File(cachePath);
			if(cacheFile.exists()){
				Packages.org.apache.commons.io.FileUtils.deleteDirectory(cacheFile);
			}			
			var tempFile = new Packages.java.io.File.createTempFile("spp", "glue");
			var param = '[{"name":"'+cameraName+'", "type" : "CAMERA", "select" : 1}]';
			Packages.org.apache.commons.io.FileUtils.writeStringToFile(tempFile, param);
			var result = GVAR_bcgi.forward({
			   cgi : "scene/update_objects.py", 
			   useEmptyBlend : false,
			   node:sceneNode,
			   env : {
				  "path" : tempFile.path
			   }
			});
			Packages.org.apache.commons.io.FileUtils.forceDelete(tempFile);
			return result;
		};
	}
	
}());

%>