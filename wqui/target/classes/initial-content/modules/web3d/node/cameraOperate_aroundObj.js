define("web3d/node/cameraOperate_aroundObj",["dojo/topic"],function(topic){		// 摄像机当前操作	var cameraState = 2;	// 摄像机当前视角模式		var cameraOperate = 0;			var CAMERA_FREE = 0;	var CAMERA_OTHERS = 1;	var CAMERA_DEFAULT = 2;	var CAMERA_ROTATE = 3;	var CAMERA_SCALE = 4;		//摄像机是否锁定	var camera_isLocked = false;	//绕物体操作模式是否锁定	var aroundObj_isLocked = false;		var cameraOperate_aroundObj = dojo.declare([],{		constructor : function(x3d){			var viewarea = x3d.runtime.canvas.doc._viewarea;						// 将红心置于物体上			topic.subscribe("edit/selected",function(selectedObject){				if(!camera_isLocked && aroundObj_isLocked){					topic.publish("cameraOperate_mrs/cameraPosition",Spolo.selectedObj._trafo.e3());				}							});						topic.subscribe("toolbar/camera/locked",function(isLockedStatus){				camera_isLocked = isLockedStatus;			});						topic.subscribe("toolbar/camera/rotateAtModel",function(){				if(Spolo.selectedObj){					aroundObj_isLocked = !aroundObj_isLocked;				}				if(aroundObj_isLocked && Spolo.selectedObj){					//使红点置于物体上					topic.publish("cameraOperate_mrs/cameraPosition",Spolo.selectedObj._trafo.e3());					}			});						topic.subscribe("shortcut3d/camera/amplify",function(){				aroundObj_isLocked = true;			});						topic.subscribe("toolbar/camera/reset",function(){				aroundObj_isLocked = false;			});						//视角变化			topic.subscribe("toolbar/camera/locateToFront", function(){				cameraOperate = CAMERA_OTHERS;			});			topic.subscribe("toolbar/camera/locateToBack", function(){				cameraOperate = CAMERA_OTHERS;			});			topic.subscribe("toolbar/camera/locateToLeft", function(){				cameraOperate = CAMERA_OTHERS;			});			topic.subscribe("toolbar/camera/locateToRight", function(){				cameraOperate = CAMERA_OTHERS;			});			topic.subscribe("toolbar/camera/locateToTop", function(){				cameraOperate = CAMERA_OTHERS;			});			topic.subscribe("toolbar/camera/locateToBottom", function(){				cameraOperate = CAMERA_OTHERS;			});			topic.subscribe("toolbar/camera/locateToFree", function(){				cameraOperate = CAMERA_FREE;			});						topic.subscribe("system/onDrag", function(x, y, buttonState){				if(!camera_isLocked && aroundObj_isLocked && Spolo.selectedObj){					myOnDrag1(x, y, buttonState);				}			});						//重写OnDrag			var myOnDrag1 = function (x, y, buttonState){				myOnDrag1 = function(x,y,buttonState){					if(initBool==true){						viewarea.handleMoveEvt(x, y, buttonState);						var navi = viewarea._scene.getNavigationInfo();						if (navi._vf.type[0].length <= 1 || navi._vf.type[0].toLowerCase() === "none") {							return;						}						var dx = x - viewarea._lastX;						var dy = y - viewarea._lastY;						var min, max, ok, d, vec;						var viewpoint = viewarea._scene.getViewpoint();						if (navi._vf.type[0].toLowerCase() === "examine")						{							if (buttonState & 1 && !event.shiftKey)//left							{								if(cameraState == CAMERA_DEFAULT){									if(cameraOperate == CAMERA_OTHERS){										rotate(viewarea,dx,dy,min,max,ok,d,vec,viewpoint);									}									if(cameraOperate == CAMERA_FREE){										rotate2(viewarea,dx,dy,min,max,ok,d,vec,viewpoint);									}								}else if(cameraState == CAMERA_ROTATE){									if(cameraOperate == CAMERA_OTHERS){										rotate(viewarea,dx,dy,min,max,ok,d,vec,viewpoint);									}									if(cameraOperate == CAMERA_FREE){										rotate2(viewarea,dx,dy,min,max,ok,d,vec,viewpoint);									}								}else if(cameraState == CAMERA_SCALE){									scale(viewarea,dx,dy,min,max,ok,d,vec,viewpoint);								}							}														if (buttonState & 1 && event.shiftKey)//left+shift							{								if(cameraState == CAMERA_DEFAULT){									rotate(viewarea,dx,dy,min,max,ok,d,vec,viewpoint);								}							}													if (buttonState & 2)//right							{								if(cameraState == CAMERA_DEFAULT){									scale(viewarea,dx,dy,min,max,ok,d,vec,viewpoint);								}							}																				}						viewarea._dx = dx;						viewarea._dy = dy;						viewarea._lastX = x;						viewarea._lastY = y;					}				}							};						//固定视角绕物体模式旋转			var rotate = function(viewarea,dx,dy,min,max,ok,d,vec,viewpoint){				var alpha = (dy * 2 * Math.PI) / viewarea._width;				var beta = (dx * 2 * Math.PI) / viewarea._height;				var gama = Math.sqrt(alpha*alpha)>Math.sqrt(beta*beta) ? alpha : beta;				var mat = viewarea.getViewMatrix();				var mz = x3dom.fields.SFMatrix4f.rotationZ(gama);				//var my = x3dom.fields.SFMatrix4f.rotationY(beta);				var center = Spolo.selectedObj._trafo.e3();				mat.setTranslate(new x3dom.fields.SFVec3f(0,0,0));				viewarea._rotMat = viewarea._rotMat.					mult(x3dom.fields.SFMatrix4f.translation(center)).					mult(mat.inverse()).					mult(mz.inverse()).					mult(mat).					mult(x3dom.fields.SFMatrix4f.translation(center.negate()));			}						//自由视角绕物体模式旋转			var rotate2 = function(viewarea,dx,dy,min,max,ok,d,vec,viewpoint){				var alpha = (dy * 2 * Math.PI) / viewarea._width;				var beta = (dx * 2 * Math.PI) / viewarea._height;				var mat = viewarea.getViewMatrix();				var mx = x3dom.fields.SFMatrix4f.rotationX(alpha);				var my = x3dom.fields.SFMatrix4f.rotationY(beta);				var center = Spolo.selectedObj._trafo.e3();				mat.setTranslate(new x3dom.fields.SFVec3f(0,0,0));				viewarea._rotMat = viewarea._rotMat.					mult(x3dom.fields.SFMatrix4f.translation(center)).					mult(mat.inverse()).					mult(mx).mult(my).					mult(mat).					mult(x3dom.fields.SFMatrix4f.translation(center.negate()));			}						//固定视角绕物体模式缩放			var scale = function(viewarea,dx,dy,min,max,ok,d,vec,viewpoint){				if (viewarea._scene._lastMin && viewarea._scene._lastMax)				{					d = (viewarea._scene._lastMax.subtract(viewarea._scene._lastMin)).length();					d = (d < x3dom.fields.Eps) ? 1 : d;				}				else				{					min = x3dom.fields.SFVec3f.MAX();					max = x3dom.fields.SFVec3f.MIN();					ok = viewarea._scene.getVolume(min, max, true);					if (ok) {						viewarea._scene._lastMin = min;						viewarea._scene._lastMax = max;					}					d = ok ? (max.subtract(min)).length() : 10;					d = (d < x3dom.fields.Eps) ? 1 : d;				}				//x3dom.debug.logInfo("ZOOM: " + min + " / " + max + " D=" + d);				//x3dom.debug.logInfo((dx+dy)+" w="+viewarea._width+", h="+viewarea._height);																var normal = d*(dx+dy)/viewarea._height;				vec = new x3dom.fields.SFVec3f(disvec.x*(normal/disvec.z) , disvec.y*(normal/disvec.z) , normal);				viewarea._movement = viewarea._movement.add(vec);				//TODO; move real distance along viewing ray				viewarea._transMat = viewpoint.getViewMatrix().inverse().					mult(x3dom.fields.SFMatrix4f.translation(viewarea._movement)).					mult(viewpoint.getViewMatrix());			}												//控制鼠标第一次按下时不执行操作			var initBool = false;			var disvec ;			topic.subscribe("system/onMousePress",function(x,y,buttonState){			    if( viewarea._lastX == -1 || viewarea._lastY == -1){					viewarea._lastX = x;					viewarea._lastY = y;					initBool = true;				}else{					initBool = true;				}								if(aroundObj_isLocked && Spolo.selectedObj){					var viewmatrix = viewarea.getViewMatrix();					disvec =  viewmatrix.mult(Spolo.selectedObj._trafo).e3();				}			});						topic.subscribe("system/onMouseRelease",function(x,y,buttonState){				viewarea._lastX = -1;				viewarea._lastY = -1;			});						//缩放			topic.subscribe("toolbar/camera/farnear", function(){				cameraState = CAMERA_SCALE;			});			//旋转			topic.subscribe("toolbar/camera/rotate", function(){				cameraState = CAMERA_ROTATE;			});				topic.subscribe("camera/cameraOperate/getAroundObjLocked",function(a){				a.setFlag(aroundObj_isLocked);			});					}	});	return cameraOperate_aroundObj;});