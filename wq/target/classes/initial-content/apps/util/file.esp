<%
/**
 *  This file is part of the spp(Superpolo Platform).
 *  Copyright (C) by SanPolo Co.Ltd.
 *  All rights reserved.
 *
 *  See http://www.spolo.org/ for more information.
 *
 *  SanPolo Co.Ltd
 *  http://www.spolo.org/
 *  Any copyright issues, please contact: copr@spolo.org
**/

response.setCharacterEncoding("UTF-8");
 
 
 /*本文件维护了系统环境的配置
 
 如下全局变量被定义和使用:
 GVAR_LoadLibrary : 必须被设置，否则视同直接从客户端访问。这将直接返回空。
 
 使用方法: <code>

	var GVAR_LoadLibrary = true;
	load("/apps/util/file.esp");
	
	var file = GVAR_File.dumpFile(node, path)
	GVAR_File.deleteFile(file)
	</code>
*/


var GVAR_File;

(function()
{
	if(!GVAR_File && GVAR_LoadLibrary)
	{
		GVAR_File = {};

		var IOUtils = new Packages.org.apache.commons.io.IOUtils;
		var FileUtils = new Packages.org.apache.commons.io.FileUtils;		

		GVAR_File.getFile = function(path)
		{
			try{
				var file = new Packages.java.io.File(path);
				return file;
			}catch(e){
				out.println(e);
			}
		}
		
		GVAR_File.getDirectory = function(path)
		{
			try{
				var dir = new Packages.java.io.File(path)
				if(!dir.exists())
				{
					dir.mkdirs();
					return dir;
				}else{
                    return dir;
                }
			}catch(e){
				out.println(e);
			}
		}
		
		GVAR_File.createTempFolder = function(path)
		{
			var tmpFolder;
			var tmpPath;
			var tmpFolderName = new Packages.java.util.UUID.randomUUID();
			try
			{
				if(path)
				{
					tmpPath = path + "/" + tmpFolderName;
					
				}else{
					var tmpDirectory = new Packages.java.lang.System.getProperty("java.io.tmpdir");
					tmpDirectory = tmpDirectory.replaceAll("\\\\","/");
					tmpPath = tmpDirectory + "/" + tmpFolderName;
				}
				tmpFolder = new Packages.java.io.File(tmpPath);
				tmpFolder.mkdirs();
				return tmpFolder;
			}catch(e){
				out.println(e);
			}
		}
		
		GVAR_File.backSlash = function(path)
		{
			return path.replaceAll("\\\\","/");
		}
		
		GVAR_File.getData = function(node) //获取data
		{	
			//Params: node: a file node
			var data;	
			var nodeType = node.getPrimaryNodeType().getName();
			if(nodeType == "nt:file")
			{
				try{
					var contentNode = node.getNode("jcr:content");
					var contentNodeType = contentNode.getPrimaryNodeType().getName();
					if(contentNode && contentNodeType == "nt:resource")
					{
						try{
							data = contentNode.getProperty("jcr:data");
						}catch(e){
							response.getWriter().println(e);
						}
					}
				}catch(e){
					response.getWriter().println(e);
				}finally{
					return data;
				}
			}else{
				throw new Error("It's not a file node");
			}
		}
		
		GVAR_File.dumpFile = function(params) //dump文件到本地
		{
			/*Params:
			 *	1.dumpFile(node, path)
			 *	2.dumpFile(name, path, inputstream)
			 *
			 *Return: a file object
			 */
			 
			var paraLength = arguments.length;
			var name;
			var path;
			var data;
			var file;
			
			if(paraLength < 2 || paraLength > 3)
			{
				throw new Error("Parameter Error");
			}else{
				if(paraLength == 2)  //(node, path)
				{
					name = arguments[0].getName();
					data = GVAR_File.getData(arguments[0]).getStream();
					path = arguments[1];
					
				}else if(paraLength == 3){ //(name, path, inputstream)
					name = arguments[0];
					path = arguments[1];
					data = arguments[2];
				}
				
				file = GVAR_File.getFile(path + '/' + name);
				var fos = FileUtils.openOutputStream(file);
				try
				{	
					IOUtils.copy(data, fos);
				}finally{
					IOUtils.closeQuietly(data);
					IOUtils.closeQuietly(fos);
				}
				
				return file;
			}
		}
		
		GVAR_File.dumpFiles = function(folderNode, path)
		{
			//Params: folderNode: a node which has fileNodes
			//        path: file dump path
			//
			//Return: a file object array
			
			var fileArray = new Array();
			
			var children = folderNode.getNodes();
			for(var i = 0; i < children.length; i++)
			{
				var child = children[i];
				var childType = child.getPrimaryNodeType().getName();
				if(childType == "nt:file")
				{
					var file = GVAR_File.dumpFile(child, path);
					fileArray.push(file);
				}
			}
			
			return fileArray;
		}
		
		GVAR_File.importFile = function(parentNode, file)
		{
			//params: parentNode: file node's parent node
			//        file: a file object
			
			var fileName = file.getName();
			var fis = FileUtils.openInputStream(file);
			
			try{
				var fileNode = parentNode.addNode(fileName, "nt:file");
				var resNode = fileNode.addNode("jcr:content", "nt:resource");
				resNode.setProperty("jcr:mimeType", "application/octet-stream");
				resNode.setProperty("jcr:data", fis);
			}catch(e){
				response.getWriter().println(e);
			}finally{
				IOUtils.closeQuietly(fis);
				parentNode.save();
			}
		}
		
		GVAR_File.deleteFile = function(file) //删除一个文件
		{
			//params: file : a file object 
			
			try{
				if(file.isFile())
				{
					FileUtils.forceDelete(file);
				}else if(file.isDirectory())
				{
					FileUtils.deleteDirectory(file);
				}		
				return true;
			}catch(e){
				return false;
			}
		}
		
		GVAR_File.deleteFiles = function(files) //删除一组文件
		{
			//params: files: a file object array
			
			for(var i = 0; i < files.length; i++)
			{
				file = files[i];
				GVAR_File.deleteFile(file);
			}
		}
		
		GVAR_File.zipFile = function(outputstream, file) //将一个文件打包
		{
			//params: outputstream: an outputstream object
			//        file: a file object
			
			if(file.isFile())
			{
				var zos = new Packages.java.util.zip.ZipOutputStream(outputstream);

				var fileName = file.name;
				var fis = FileUtils.openInputStream(file);
				zos.putNextEntry(new Packages.java.util.zip.ZipEntry(fileName));
				try
				{	
					IOUtils.copy(fis, zos);
				}finally{
					zos.closeEntry();
					IOUtils.closeQuietly(fis);
					IOUtils.closeQuietly(zos);
				}				
			}
		}		

		GVAR_File.zipFiles = function(outputstream, files)  //将一组文件打包
		{
			//params: outputstream: an outputstream object
			//        fils: a file object array,which can contain files or folders
			
			var zos = new Packages.java.util.zip.ZipOutputStream(outputstream);

			for(var i = 0; i < files.length; i++)
			{
				var file = files[i];
				if(file.isFile())
				{
				
					var fileName = file.name;
					var fis = FileUtils.openInputStream(file);
					zos.putNextEntry(new Packages.java.util.zip.ZipEntry(fileName));
					try
					{	
						IOUtils.copy(fis, zos);
					}finally{
						zos.closeEntry();
						IOUtils.closeQuietly(fis);
					}
					
				}else if(file.isDirectory()){
					var folderName = file.getName();
					var dfiles = file.listFiles();
					
					for(var j = 0; j < dfiles.length; j++)
					{
						var dfile = dfiles[j];
						var fileName = dfile.name;
						var fis = FileUtils.openInputStream(dfile);
						zos.putNextEntry(new Packages.java.util.zip.ZipEntry(folderName + '/' + fileName));
						try
						{	
							IOUtils.copy(fis, zos);
						}finally{
							zos.closeEntry();
							IOUtils.closeQuietly(fis);
						}
					}
				}
			}
			IOUtils.closeQuietly(zos);	
		}
		
		/**该方法打包一组file对象到指定的path
		*@param outputstream 一个Packages.java.util.zip.ZipOutputStream实例
		*该方法不关闭流,这样在持续调用该方法时可以连续添加文件到zip包中，所以需要调用者手动关闭outputstream
		*/
		GVAR_File.zipFilesInPath = function(outputstream,files,path)  //将一组文件打包
		{
			//params: outputstream: an outputstream object
			//        fils: a file object array,which can contain files or folders
			if(!path){
				path = "";
			}else{
				path = path+"/";
			}
			var zos = outputstream;

			for(var i = 0; i < files.length; i++)
			{
				var file = files[i];
				if(file.isFile())
				{
				
					var fileName = file.name;
					var fis = FileUtils.openInputStream(file);
					zos.putNextEntry(new Packages.java.util.zip.ZipEntry(path+fileName));
					try
					{	
						IOUtils.copy(fis, zos);
					}finally{
						zos.closeEntry();
						IOUtils.closeQuietly(fis);
					}
					
				}else if(file.isDirectory()){
					var folderName = file.getName();
					var dfiles = file.listFiles();
					
					for(var j = 0; j < dfiles.length; j++)
					{
						var dfile = dfiles[j];
						var fileName = dfile.name;
						var fis = FileUtils.openInputStream(dfile);
						zos.putNextEntry(new Packages.java.util.zip.ZipEntry(path+folderName + '/' + fileName));
						try
						{	
							IOUtils.copy(fis, zos);
						}finally{
							zos.closeEntry();
							IOUtils.closeQuietly(fis);
						}
					}
				}
			}
		}
		
		GVAR_File.zipFolder = function(outputstream, folder)
		{
			//params: outputstream: an outputstream object
			//        folder: a folder
			
			if(folder.isDirectory())
			{
				var zos = new Packages.java.util.zip.ZipOutputStream(outputstream);
				
				var folderName = folder.getName();
				var files = folder.listFiles();
				
				for(var j = 0; j < files.length; j++)
				{
					var file = files[j];
					var fileName = file.name;
					var fis = FileUtils.openInputStream(file);
					zos.putNextEntry(new Packages.java.util.zip.ZipEntry(folderName + '/' + fileName));
					try
					{	
						IOUtils.copy(fis, zos);
					}finally{
						zos.closeEntry();
						IOUtils.closeQuietly(fis);
					}
				}
				IOUtils.closeQuietly(zos);				
			}			
		}
		
		GVAR_File.unZipFile = function(zipFile, toDirPath)
		{
			var unZipFiles = new Array();
			
			if(zipFile.exists())
			{
				var fis = FileUtils.openInputStream(zipFile);
				var unZipFiles = GVAR_File.unZipStream(fis, toDirPath)
			}
			
			return unZipFiles;
		}
		
		GVAR_File.unZipStream = function(inputstream, toDirPath)
		{
			var unZipFiles = new Array();
			
			if(toDirPath)
			{
				var toDir = GVAR_File.getDirectory(toDirPath);
			}else{
				//TODO:对未指定解压目录进行处理
				var toDirPath = '';
			}
			
			var zis = new Packages.java.util.zip.ZipInputStream(inputstream);
			while(ze = zis.getNextEntry())
			{
				var eName = ze.getName();
				if(ze.isDirectory())
				{
					GVAR_File.getDirectory(toDirPath + '/' + eName);
					continue;
				}			
				var file = new Packages.java.io.File(toDirPath + '/' + eName);
				var fileParent = file.getParentFile();
                if(fileParent != null && (!fileParent.exists())){
                    fileParent.mkdirs();
                }
				var fos = FileUtils.openOutputStream(file);
				try{
					IOUtils.copy(zis, fos);
					unZipFiles.push(file);
				}finally{
					IOUtils.closeQuietly(fos);
				}
			}
			zis.closeEntry();
			IOUtils.closeQuietly(zis);
			IOUtils.closeQuietly(inputstream);
			
			return unZipFiles;			
		}
      
      GVAR_File.listFiles = function(dir, wildcard, recursive)
      {
         //params: dir: The directory to search in
         //        wildcard: the wildcard to match
         //        recursive: If true all subdirectories are searched as well
         
         var regFileFilter = new Packages.org.apache.commons.io.filefilter.WildcardFileFilter(wildcard);
         var findSub = null;
         if(recursive){
            findSub = Packages.org.apache.commons.io.filefilter.TrueFileFilter.INSTANCE;
         }
         var files = Packages.org.apache.commons.io.FileUtils.listFiles(dir, regFileFilter, findSub).toArray();
         
         return files
      }
				
	}
}());

%>