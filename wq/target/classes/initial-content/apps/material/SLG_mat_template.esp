<%
/**
 *  This file is part of the spp(Superpolo Platform).
 *  Copyright (C) by SanPolo Co.Ltd.
 *  All rights reserved.
 *
 *  See http://www.spolo.org/ for more information.
 *
 *  SanPolo Co.Ltd
 *  http://www.spolo.org/
 *  Any copyright issues, please contact: copr@spolo.org
**/

// 添加sling子节点属性
function slingChildAddProperty(child,implementCfg)
{
	//设置子节点属性类型
	child.setProperty("sling:resourceType", implementCfg.type);
	if((implementCfg.name != null)&& (implementCfg.value != null)){
		child.setProperty(implementCfg.name,implementCfg.value);
	}
	
	child.save();
}

// 添加sling子节点（文件夹）
function slingAppendChild(father, childCfg)
{
	// 添加子节点为文件夹
	var child = father.addNode(childCfg.concept.name,childCfg.concept.type);
	father.save();
	//设置子节点的类型
	if(childCfg.concept.typename == null)
	{
		childCfg.concept.typename = childCfg.concept.name;
	}
	child.setProperty("typename",childCfg.concept.typename);

	slingChildAddProperty(child,childCfg.implement);
	return child;
}

function createmat(currentNode,matName,matType)
{
	if(currentNode != null)
	{
		out.write("create slg mat!\n");
		
		//创建材质存储节点及属性
		var matnode;
		
		if(currentNode["sling:resourceType"] == "materiallib")
		{
			out.write("materiallib!\n");
			
			var MatStoreNodeCfg = {
				"concept": {
					"name":matName,
					"type":"sling:Folder"
				},
				"implement":{
					"type":"material"
				}
				
			}
			
			if(!currentNode.hasNode(MatStoreNodeCfg.concept.name)){
				matnode = slingAppendChild(currentNode,MatStoreNodeCfg);
			}else{
				matnode = currentNode.getNode(MatStoreNodeCfg.concept.name);
			}
		
		}
		else if(currentNode["sling:resourceType"] == "material")
		{
			matnode = currentNode;
		}

		var matDateNodeCfg = {
			"concept": {
				"name":"matdata",
				"typename":matType + "_material",
				"type":"sling:Folder"
			},
			"implement":{
				"type":matType + "_material",
				"name":"matname",
				"value":matName
			}
			
		}
		
		var matdatanode;
		if(matnode.hasNode(matDateNodeCfg.concept.name)){
			matdatanode = matnode.getNode(matDateNodeCfg.concept.name);
			matdatanode.remove();
		}
		matdatanode = slingAppendChild(matnode,matDateNodeCfg);
		//判断材质类型
		switch(String(matType))
		{
			case "matte" :{
				slingAppendChild(matdatanode,diffuseNodeCfg);
				break;
			}
			case "light" :{
				slingAppendChild(matdatanode,diffuseNodeCfg);
				break;
			}
			case "mirror" :{
				slingAppendChild(matdatanode,specularNodeCfg);
				slingAppendChild(matdatanode,reflectionNodeCfg);
				break;
			}
			case "mattemirror" :{
				slingAppendChild(matdatanode,diffuseNodeCfg);
				slingAppendChild(matdatanode,specularNodeCfg);
				slingAppendChild(matdatanode,reflectionNodeCfg);
				break;
			}
			case "glass" :{
				slingAppendChild(matdatanode,transmissionNodeCfg);
				slingAppendChild(matdatanode,specularNodeCfg);
				slingAppendChild(matdatanode,reflectionNodeCfg);
				slingAppendChild(matdatanode,specular_transmissionsNodeCfg);
				slingAppendChild(matdatanode,inside_index_of_refractionNodeCfg);
				slingAppendChild(matdatanode,outside_index_of_refractionNodeCfg);
				break;
			}
			case "metal" :{
				slingAppendChild(matdatanode,exponentNodeCfg);
				slingAppendChild(matdatanode,specularNodeCfg);
				slingAppendChild(matdatanode,reflectionNodeCfg);
				break;
			}
			case "mattemetal" :{
				slingAppendChild(matdatanode,diffuseNodeCfg);
				slingAppendChild(matdatanode,exponentNodeCfg);
				slingAppendChild(matdatanode,specularNodeCfg);
				slingAppendChild(matdatanode,reflectionNodeCfg);
				break;
			}
			case "archglass" :{
				slingAppendChild(matdatanode,reflectionNodeCfg);
				slingAppendChild(matdatanode,specular_reflectionsNodeCfg);
				slingAppendChild(matdatanode,transmissionNodeCfg);
				slingAppendChild(matdatanode,specular_transmissionsNodeCfg);
				break;
			}
			case "alloy" :{
				slingAppendChild(matdatanode,diffuseNodeCfg);
				slingAppendChild(matdatanode,exponentNodeCfg);
				slingAppendChild(matdatanode,specularNodeCfg);
				slingAppendChild(matdatanode,reflectionNodeCfg);
				slingAppendChild(matdatanode,schlick_termNodeCfg);
				break;
			}
			default:
				out.write("Error: Unknown slg mat " + matType + "!\n");
		}	
	}
}
%>