<%

/* 
 *  This file is part of the SPP(Superpolo Platform).
 *  Copyright (C) by SanPolo Co.Ltd.
 *  All rights reserved.
 *
 *  See http://spp.spolo.org/ for more information.
 *
 *  SanPolo Co.Ltd
 *  http://spp.spolo.org/
 *  Any copyright issues, please contact: copr@spolo.org
 */
 

response.setCharacterEncoding("UTF-8");
response.setContentType("text/html");
out.println("<html> <body> ");



var notifyFunc = null;
function	notifyClient(msg)
{
	if(notifyFunc)
	{
		//Packages.java.lang.System.out.println("Notify client msg = " + msg);
		out.println("<script>" + notifyFunc + "(\"" + msg + "\");</script>");
		response.flushBuffer();
	}
}
	
var GVAR_LoadLibrary = true;
load("/apps/util/sysconfig.esp");
load("/apps/util/blendercgi.esp");
load("/apps/util/request.esp");

//TODO: 支持事物处理，在当前节点下记录importing属性。并在结束之后清理之。所以检查importing属性，如果正在importing，则直接返回。本处理应该在客户端检查，如果importing，则暂停上传。
//上面的TODO优先级很低，因为我们目前几乎不会共享操作文件——每人用户有自己的目录。
//out.println(Packages.org.spolo.apps.util.Sysconfig);
var NodePath = GVAR_system.getNodePath(currentNode,true);

var missingfilesPath = NodePath + GVAR_system.path_separator + "import" + GVAR_system.path_separator + "missingfiles";

var missingfiles = new Packages.java.io.File(missingfilesPath);
if(!missingfiles.exists())
{
	missingfiles.mkdirs();
}

//根据传入的参数配置如下几个全局变量。
//notifyFunc指示了我们使用何种方式来回应客户端。
notifyFunc = request.getParameter("notifier");

//useNginx指示了是否使用nginx作为proxy来处理文件上传。
var useNginx = true;
{
	var useNginx_str = request.getParameter("useNginx");
	if(useNginx_str == "false")
		useNginx = false;
	Packages.java.lang.System.out.println("useNginx_str = " + useNginx_str + " and useNginx = " + useNginx);
}

//isDebug指示了我们是否需要在textarea中输出blender的内容。
var isDebug = false;
var debugStr = request.getParameter("debug");
if(debugStr && debugStr != "false")
	isDebug = true;

//保存了输出给客户端的内容.
var result;
if(isDebug)
{
	result = "";
}else{
	result = "{ suc : 'failed' , reason : 'unknow'}";
}



//reuqest_merge指示了本次请求是否合并到当前内容上。如果是false,则
var reuqest_merge = false;
reuqest_merge_str = request.getParameter("merge");
if(reuqest_merge_str != null && reuqest_merge_str == "true")
	reuqest_merge = true;

if(useNginx)
{//使用nginx作为上传处理器。
	var upfileinfo = Packages.org.spolo.apps.util.UploadFileInfo.getNginxUploadInfo(request);
	var count = upfileinfo.length;
	for(var i = 0; i < count; i++)
	{
		var ui = upfileinfo[i];
		try{
			//TODO: 给出客户端正在处理的提示。
			var notifyInfo = "uncompress file '" + ui.originalname + "'...";
			notifyClient(notifyInfo);

			//1.3 检查刚上传的文件是否是一个压缩文件。如果是，保持目录结构并解压到import目录。
			var start = Date.now();
			var resultHandler = GVAR_system.nginxUncompress(ui.originalname,ui.localfilepath,missingfilesPath);
			if(resultHandler != null)
			{//是一个压缩文件，删除原始文件．
				while(!resultHandler.hasResult())
				{
					resultHandler.waitFor(2 * 1000);
					var end = Date.now();
					var elapsed = (end - start) / 1000;
					notifyClient("uncompress continued for about " + elapsed + " seconds,please waiting...");
				}
				//如果处于调试模式.将进程内容输出到result.
				if(isDebug)
				{
					result += resultHandler.stdout.toString();
				}
				Packages.org.apache.commons.io.FileUtils.forceDelete(new Packages.java.io.File(ui.localfilepath));
			}
			
			notifyClient(notifyInfo + "done!");
		}catch(e)
		{
			notifyClient("can not uncompress file : " + e);
		}
		// Packages.java.lang.System.out.println("ui.fieldname=" + ui.fieldname);
		// Packages.java.lang.System.out.println("ui.originalname=" + ui.originalname);
		// Packages.java.lang.System.out.println("ui.localfilepath=" + ui.localfilepath);
		// Packages.java.lang.System.out.println("ui.mime=" + ui.mime);
		// Packages.java.lang.System.out.println("ui.sequence=" + ui.sequence);
	}
}else{
	GVAR_uploader.foreach(function(name,param){
		Packages.java.lang.System.out.println("recieve " + name + "=" + param);
		if(!param.isFormField())
		{
			try
			{
				//TODO: 给出客户端正在处理的提示。
				var notifyInfo = "copy and uncompress file '" + param.getFileName() + "'...";
				notifyClient(notifyInfo);
				
				var file = GVAR_uploader.copyFile(param,missingfilesPath);
				
				if(GVAR_system.uncompress(file))
				{
					Packages.org.apache.commons.io.FileUtils.forceDelete(file);
					
				}
				
				
				notifyClient(notifyInfo + "done!");
			}
			catch(e)
			{//uncompress error!
				notifyClient("can not uncompress file : " + e);
			}
		}
	});
}







out.println("<textarea>");
out.println(result);
out.println("</textarea>");
//out.println("<script>window.parent.notifyInfo(2);</script>");
out.println("</body></html>");

%>