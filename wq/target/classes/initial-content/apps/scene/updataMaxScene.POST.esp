<%
/* 
 *  This file is part of the SPP(Superpolo Platform).
 *  Copyright (C) by SanPolo Co.Ltd.
 *  All rights reserved.
 *
 *  See http://spp.spolo.org/ for more information.
 *
 *  SanPolo Co.Ltd
 *  http://spp.spolo.org/
 *  Any copyright issues, please contact: copr@spolo.org
 */
 

response.setCharacterEncoding("UTF-8");
response.setContentType("text/html");
out.println("<html> <body> ");

var notifyFunc = null;
function	notifyClient(msg)
{
	if(notifyFunc)
	{
		out.println("<script>" + notifyFunc + "(\"" + msg + "\");</script>");
		response.flushBuffer();
	}
}
	
var GVAR_LoadLibrary = true;

load("/apps/util/sysconfig.esp");
load("/apps/util/blendercgi.esp");
load("/apps/util/request.esp");
load("/apps/util/file.esp");

//notifyFunc指示了我们使用何种方式来回应客户端。
notifyFunc = request.getParameter("notifier");

var useNginx_str = request.getParameter("useNginx");
//useNginx指示了是否使用nginx作为proxy来处理文件上传。
var useNginx = true;
if(useNginx_str == "false"){
	useNginx = false;
}

//保存了输出给客户端的内容.
var result = new Packages.org.apache.sling.commons.json.JSONObject();
result.put("success",true);
var NodePath = GVAR_system.getNodePath(currentNode,true);

//获取预览图磁盘路径
var previewpath = currentNode.getProperty("previewlib").toString();
var GVAR_Session;
var GVAR_RootNode;
var slingRepos = sling.getService(Packages.org.apache.sling.jcr.api.SlingRepository);
var adminSession = slingRepos.loginAdministrative(null);
GVAR_Session = adminSession;
GVAR_RootNode = GVAR_Session.getRootNode();
if(previewpath[0] == "/")
{
    previewpath = previewpath.substring(1);
}
var previewlibNode = GVAR_RootNode.getNode(previewpath);
var previewlibNodePath = GVAR_system.getNodePath(previewlibNode.getNodes()[0],true);

//创建临时目录
var importPath = NodePath + GVAR_system.path_separator + "import";
GVAR_system.deleteDirectory(importPath);
var importDir = new Packages.java.io.File(importPath);
if(!importDir.exists())
{
	importDir.mkdirs();
}

var dataDirPath = NodePath + GVAR_system.path_separator + "data";
var dataDir = new Packages.java.io.File(dataDirPath);

if(useNginx){
//使用nginx作为上传处理器。
	var upfileinfo = Packages.org.spolo.apps.util.UploadFileInfo.getNginxUploadInfo(request);
	var count = upfileinfo.length;
	for(var i = 0; i < count; i++)
	{
		var ui = upfileinfo[i];
		try{
			//TODO: 给出客户端正在处理的提示。
			var notifyInfo = "uncompress file '" + ui.originalname + "'...";
			notifyClient(notifyInfo);

			//1.3 检查刚上传的文件是否是一个压缩文件。如果是，保持目录结构并解压到import目录。
			var start = Date.now();
			var resultHandler = GVAR_system.nginxUncompress(ui.originalname,ui.localfilepath,importDir.getPath());
			if(resultHandler != null)
			{//是一个压缩文件，删除原始文件．
				while(!resultHandler.hasResult())
				{
					resultHandler.waitFor(2 * 1000);
					var end = Date.now();
					var elapsed = (end - start) / 1000;
					notifyClient("uncompress continued for about " + elapsed + " seconds,please waiting...");
				}
				//如果处于调试模式.将进程内容输出到result.
				Packages.org.apache.commons.io.FileUtils.forceDelete(new Packages.java.io.File(ui.localfilepath));
			}
			notifyClient(notifyInfo + "done!");
		}catch(e){
			notifyClient("can not uncompress file : " + e);
		}
		// Packages.java.lang.System.out.println("ui.fieldname=" + ui.fieldname);
		// Packages.java.lang.System.out.println("ui.originalname=" + ui.originalname);
		// Packages.java.lang.System.out.println("ui.localfilepath=" + ui.localfilepath);
		// Packages.java.lang.System.out.println("ui.mime=" + ui.mime);
		// Packages.java.lang.System.out.println("ui.sequence=" + ui.sequence);
	}
}else{
	GVAR_uploader.foreach(function(name,param){
		Packages.java.lang.System.out.println("recieve " + name + "=" + param);
		if(!param.isFormField())
		{
			try
			{
				//TODO: 给出客户端正在处理的提示。
				var notifyInfo = "copy and uncompress file '" + param.getFileName() + "'...";
				notifyClient(notifyInfo);
				
				var file = GVAR_uploader.copyFile(param,importDir.getPath());
				
				if(GVAR_system.uncompress(file)){
					notifyClient(notifyInfo + "done!");
				}else{
					notifyClient(notifyInfo + "failed!");
				}
				Packages.org.apache.commons.io.FileUtils.forceDelete(file);
			}
			catch(e)
			{//uncompress error!
				notifyClient("can not uncompress file : " + e);
			}
		}
	});
}
//从importDir copy 到 data
try{
	//查看是否存在main.max
	var mainFile = new Packages.java.io.File(importDir.getPath()+ GVAR_system.path_separator + "main.max");
	if(!mainFile.exists() || !mainFile.isFile()){
		var maxfiles = Packages.org.apache.commons.io.FileUtils.listFiles(importDir,["max"],false);
		if(!maxfiles.isEmpty()){
			maxfiles = maxfiles.toArray();
			maxfiles[0].renameTo(mainFile);
		}
	}
    //查看是否存在main.blend
    var mainFile_blend = new Packages.java.io.File(importDir.getPath()+ GVAR_system.path_separator + "main.blend");
    if(!mainFile_blend.exists() || !mainFile_blend.isFile()){
		var mainFile_blends = Packages.org.apache.commons.io.FileUtils.listFiles(importDir,["blend"],false);
		if(!mainFile_blends.isEmpty()){
			mainFile_blends = mainFile_blends.toArray();
			mainFile_blends[0].renameTo(mainFile_blend);
		}
	}
    
    //重命名diffuse为maxdiffuse
    if(mainFile.exists()){
        var diffusedir = new Packages.java.io.File(importDir.getPath()+ GVAR_system.path_separator + "diffuse");
        var maxdiffusedir = new Packages.java.io.File(importDir.getPath()+ GVAR_system.path_separator + "maxdiffuse");
        diffusedir.renameTo(maxdiffusedir);
	}
	//copy importDir下的文件到data
	notifyClient("copy files start");
	Packages.org.apache.commons.io.FileUtils.copyDirectory(importDir,dataDir);
	notifyClient("copy files end");
    //更新预览图
    var previewcachepath = previewlibNodePath + GVAR_system.path_separator + "cache";
    var previewcachefile = new Packages.java.io.File(previewcachepath);
    if(previewcachefile.exists()){
        Packages.org.apache.commons.io.FileUtils.forceDelete(previewcachefile);
    }
    var list = GVAR_File.listFiles(importDir,"*.jpg",false);
    var temppreview = null;
    for(var i=0;i<list.length;i++){
        // Packages.java.lang.System.out.println(list[i].getName());
        var tempname = list[i].getName().split(".jpg")[0];
        var tempfile = new Packages.java.io.File(importDir.getPath()+ GVAR_system.path_separator + tempname +".json");
        // Packages.java.lang.System.out.println(tempfile.getName());
        if(tempfile.exists()){
            temppreview = list[i];
        }
    }
    var tarpreview = new Packages.java.io.File(previewlibNodePath+ GVAR_system.path_separator + tempname + ".jpg");
    Packages.org.apache.commons.io.FileUtils.copyFile(temppreview,tarpreview);

}catch(e){
	Packages.java.lang.System.out.println(e);
	result.put("success",false);
	result.put("reason",e.message);
}


out.println("<textarea>");
out.println(result.toString());
out.println("</textarea>");
out.println("</body></html>");

%>