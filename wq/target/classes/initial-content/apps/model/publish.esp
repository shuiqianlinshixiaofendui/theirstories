<%

/* 
 *  This file is part of the SPP(Superpolo Platform).
 *  Copyright (C) by SanPolo Co.Ltd.
 *  All rights reserved.
 *
 *  See http://spp.spolo.org/ for more information.
 *
 *  SanPolo Co.Ltd
 *  http://spp.spolo.org/
 *  Any copyright issues, please contact: copr@spolo.org
 */
 
 
response.setCharacterEncoding("UTF-8");
var GVAR_LoadLibrary = true;
load("/apps/util/sysconfig.esp");
load("/apps/util/blendercgi.esp");
load("/apps/util/git.esp");
load("/apps/util/history.esp");
// out.println("test publish!!!");

//获取并设置所需全局变量
var GVAR_CurrentNode;
var GVAR_Session;
var GVAR_WorkSpace;
var GVAR_RootNode;
//设置git参数
var option = {};

GVAR_CurrentNode = currentNode;
GVAR_Session = currentNode.getSession();


function publish(hasocm)
{
	//获取路径信息。
	var RequestPathInfo = request.getRequestPathInfo();
	// out.println("RequestPathInfo : " + RequestPathInfo);
	//获取mime map service.
	var mimeService = sling.getService(Packages.org.apache.sling.commons.mime.MimeTypeService);

	//首先尝试获取suffix。
	var extension;
	var targetpath = String(RequestPathInfo.getSuffix());

	// out.println("targetpath : " + targetpath);

	var tarpatharr = targetpath.split("/");
	// out.println("tarpatharr : " + tarpatharr[1]);
	// var parentNode = currentNode.getParent();
	// out.println(parentNode.getName());
	// out.println(currentNode.getName());
	// var publishAuthor = parentNode["publishauthor"]; 
	// out.println(publishAuthor);
	var  publishAuthor = GVAR_Session.getUserID();

	// out.println(currentNode);

	// out.println(publishAuthor);


	//判断发布位置，确定是否切换到管理员身份
	if(String(tarpatharr[1]) == String("content") && String(tarpatharr[2]) == String("modellib"))
	{
		// out.println("admin");
		//切换到管理员身份
		var slingRepos = sling.getService(Packages.org.apache.sling.jcr.api.SlingRepository);
		var adminSession = slingRepos.loginAdministrative(null);
		GVAR_Session = adminSession;
	}

	GVAR_WorkSpace = GVAR_Session.getWorkspace();
	GVAR_RootNode = GVAR_Session.getRootNode();



	var targetnode;
	if(GVAR_RootNode.hasNode(targetpath.substring(1,targetpath.length)))
	{
		//targetnode = GVAR_RootNode.getNode(targetpath.substring(1,targetpath.length));
		//提示节点已经存在
		out.println("target node is exists!!!");
	}
	else
	{

		//复制节点
		GVAR_WorkSpace.copy(GVAR_CurrentNode.getPath(),targetpath);
		GVAR_RootNode.save();
		
		targetnode = GVAR_RootNode.getNode(targetpath.substring(1,targetpath.length));
		
		var tarnodePath = GVAR_system.getNodePath(targetnode,true);
		var srcnodePath = GVAR_system.getNodePath(currentNode,true);
		
		var srcfile = new Packages.java.io.File(srcnodePath);
		
		var tarfile = new Packages.java.io.File(tarnodePath);
		
		Packages.org.apache.commons.io.FileUtils.copyDirectory(srcfile,tarfile);
		
		Packages.java.lang.System.out.println("copy files from " + srcnodePath + " to " + tarfile);
		
		//设置preview对已发布模型的引用
		//var model_previewlib = targetnode["previewlib"];
		
		//out.println(targetnode["jcr:created"]);
		var publishdate = new Date();
		var year = publishdate.getFullYear();
		var month = publishdate.getMonth();
		var date = publishdate.getDate();
		var hours = publishdate.getHours();
		var minutes = publishdate.getMinutes();
		var seconds = publishdate.getSeconds();
		var calendar = new Packages.java.util.Calendar.getInstance();
		calendar.set(year,month,date,hours,minutes,seconds);
		targetnode.setProperty("publishdate", calendar);
		
		// out.println(publishAuthor);
		//获取用户名
		targetnode.setProperty("publishAuthor", publishAuthor);
		//用户名转义
		option.name  = new Packages.org.spolo.utils.EncodeUname().decode(publishAuthor);
		
		//设置提交信息
		var publishMSG = "Publish!";
		targetnode.setProperty("publishMSG",publishMSG);
		option.msg = publishMSG;
		
		//配合git接口修改currentNode
		currentNode = targetnode;
		//初始化git仓库
		GVAR_Git.preCommit();
		//版本提交到git
		GVAR_Git.postCommit(option);
		
		//获取版本号作为最新版本号
		var VersionID = GVAR_Git_History.showNewestVersion();
		targetnode.setProperty("NewestVersion",VersionID);
		targetnode.setProperty("CurrentVersion",VersionID);
		
		
		//改回currentNode
		currentNode = GVAR_CurrentNode;
		
		targetnode.save();
		if(hasocm == true)
		{
			proc_mat(targetnode);
		}
		else
		{
			argetnode.setProperty("hasocm", "false");
		
			targetnode.save();
		}
		
		
		// if(model_previewlib != undefined)
		// {
			// for(var i in model_previewlib)
			// {
				// var model_preview =  model_previewlib[i];
				
				// var previewpath = model_preview["previewpath"];
				
				// if(previewpath != undefined)
				// {
				
					// var previewnode = GVAR_RootNode.getNode(previewpath.substring(1,previewpath.length));
					
					// if(previewnode != undefined)
					// {
						// var preview_models = previewnode["model"];
						
						// if(preview_models == undefined)
						// {
							// preview_models = previewnode.addNode("model","sling:Folder");
							
							// previewnode.save();
						// }
						
						// var preview_model = preview_models.addNode(targetnode.getName(),"sling:Folder");
						
						// preview_models.save();
						
						// preview_model.setProperty("modelpath",targetnode.getPath());
						
						// preview_model.save();
						
					// }
				// }
			// }
		// }
	}
}

function proc_mat(targetnode)
{
	var modelnode = targetnode;
	var targetpath = "/content/materiallib/modelpublish";
	if(!GVAR_RootNode.hasNode(targetpath.substring(1,targetpath.length)))
	{
		//切换到管理员身份
		var slingRepos = sling.getService(Packages.org.apache.sling.jcr.api.SlingRepository);
		var adminSession = slingRepos.loginAdministrative(null);
		GVAR_Session = adminSession;
		GVAR_WorkSpace = GVAR_Session.getWorkspace();
		GVAR_RootNode = GVAR_Session.getRootNode();
		
		GVAR_RootNode.addNode(targetpath.substring(1,targetpath.length));
		
		GVAR_Session.save();
	}
	var publishmat = GVAR_bcgi.forward({cgi : "model/publish.py",node : modelnode, useEmptyBlend : false, env : {tarnode : targetpath}});
	// out.print(publishmat);
}


try{
	var dispOption = new Packages.org.apache.sling.api.request.RequestDispatcherOptions();
	var path = currentNode.getPath() + ".checkocmmat";
	var disp = request.getRequestDispatcher(path,dispOption);
	var cache_response = new Packages.org.spolo.utils.BufferedServletResponse(response);
	disp.forward(request,cache_response);

	var check = cache_response.getBodyContent();
	check = check.replace("\n","").replace("\t","").replace(" ","");
	// out.print(check.length());
	if(check.length() == 0)
	{
		publish(true);
		out.print("suc");
	}
	else
	{
		publish(false);
		out.print("warning : this model is short of ocm!!!");
	}
	}catch(e)
	{
		
	}
%>