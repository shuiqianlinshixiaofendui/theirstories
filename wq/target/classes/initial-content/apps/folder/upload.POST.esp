<%
response.setCharacterEncoding("UTF-8");

var GVAR_LoadLibrary = true;
var useNginx = true;
var modelInfo = null;
var result = new Packages.org.apache.sling.commons.json.JSONObject();
var resultString = "";
var responseCode = null;

load("/apps/util/file.esp");
load("/apps/util/sysconfig.esp");
load("/apps/util/request.esp");

try{
	var nodePath = currentNode.getPath();
	if(nodePath != "/content/shmodellib" && nodePath !="/content/roomlib") {
		responseCode = 404;
		throw Error("Not Found");
	}
	var useNginxReq = request.getParameter("useNginx");
	var modelInfoReq = request.getParameter("modelInfo");

	if(useNginxReq && useNginxReq.equals("false")) {
		useNginx = false;
	}

	var modelNodeName = generateRandomNodeName("model");
	try{
		var modelNode = currentNode.addNode(modelNodeName, "sling:Folder");
	} catch(e) {
		responseCode = 401;
		throw Error("Authorization Required");		
	}
	
	// create dir for 3d models, in file system.
	// high poly are blender format.
	// low poly are sh3f format.
	
	var modelNodePath = GVAR_system.getNodePath(modelNode, true);

	var modelDataPath = modelNodePath + GVAR_system.path_separator + "data";
	var highPolyModelPath = modelDataPath + GVAR_system.path_separator + "highPoly";
	var lowPolyModelPath = modelDataPath + GVAR_system.path_separator + "lowPoly";
	var previewPath = modelDataPath + GVAR_system.path_separator + "preview";
	
	var modelDataDir = new Packages.java.io.File(modelDataPath);
	var highPolyModelDir = new Packages.java.io.File(highPolyModelPath);
	var lowPolyModelDir = new Packages.java.io.File(lowPolyModelPath);

	highPolyModelDir.mkdirs();
	lowPolyModelDir.mkdirs();

	if(modelInfoReq) {
		try {
			modelInfo = new Packages.org.apache.sling.commons.json.JSONObject(modelInfoReq);
		} catch(e) {
			Packages.java.lang.System.out.println("Parse modelInfo Error: " + e);
			responseCode = 422;
			throw Error("Field Invalid");
		}
	}

	// create jcr node, according to json data.
	
	if(modelInfo) {
		var modelInfoKeys = modelInfo.keys();
		while(modelInfoKeys.hasNext()) {
			var modelInfoKey = modelInfoKeys.next();
			var modelInfoValue = modelInfo.get(modelInfoKey);
			if(modelInfoValue.getClass().toString().equals("class org.apache.sling.commons.json.JSONArray")) {
				var stringArray = Packages.java.lang.reflect.Array.newInstance(Packages.java.lang.String, modelInfoValue.length());
				for(var i = 0; i < modelInfoValue.length(); i++) {
					stringArray[i] = modelInfoValue.getString(i);
				}
				modelNode.setProperty(modelInfoKey, stringArray, 1);
				continue;
			}
			modelNode.setProperty(modelInfoKey, modelInfoValue);
		}
		modelNode.setProperty("sling:resourceType", "model");
		try{
			currentNode.save();
		} catch(e) {
			responseCode = 401;
			throw Error("Authorization Required");
		}
	}

	// copy/decompress models to dirs, created above.
	
	if(useNginx) {
		var upFileInfo = Packages.org.spolo.apps.util.UploadFileInfo.getNginxUploadInfo(request);
		var SH3DFileExtension = "";
		for(var i = 0, count = upFileInfo.length; i != count; i++) {
			var ui = upFileInfo[i];
			var start = Date.now();
			var resultHandler = null;
            var previewFile = null;

			if(ui.fieldname.equals("highPoly")) {
				var highPolyFileExtension = Packages.org.apache.commons.io.FilenameUtils.getExtension(ui.originalname);
				if(!highPolyFileExtension.equals("blend")) {
					resultHandler = GVAR_system.nginxUncompress(ui.originalname, ui.localfilepath, highPolyModelDir);
				} else {
					responseCode = 422;
					throw("High Poly Model must be packed!");
				}
			} else if(ui.fieldname.equals("lowPoly")) {
				SH3DFileExtension = Packages.org.apache.commons.io.FilenameUtils.getExtension(ui.originalname);
				if (SH3DFileExtension.equals("sh3f") || SH3DFileExtension.equals("sh3d")) {
					var SH3DFile = new Packages.java.io.File(ui.localfilepath);
					Packages.org.apache.commons.io.FileUtils.copyFileToDirectory(SH3DFile, lowPolyModelDir);
				} else {
					SH3DFileExtension = "";
					resultHandler = GVAR_system.nginxUncompress(ui.originalname, ui.localfilepath, lowPolyModelDir);
				}
			} else if(ui.fieldname.equals("preview")) {
				previewFile = new Packages.java.io.File(ui.localfilepath);
                var suff = (ui.originalname+"").split(".")[1];
                var newPreviewFile = new Packages.java.io.File(modelDataPath+ GVAR_system.path_separator + "preview." + suff);
                Packages.org.apache.commons.io.FileUtils.copyFile(previewFile, newPreviewFile);
			}

			if(resultHandler !== null)
			{
				while(!resultHandler.hasResult())
				{
					resultHandler.waitFor(2 * 1000);
					var end = Date.now();
					var elapsed = (end - start) / 1000;
				}
				Packages.org.apache.commons.io.FileUtils.forceDelete(new Packages.java.io.File(ui.localfilepath));
			}
		}

		var SH3DFile = GVAR_File.listFiles(lowPolyModelDir, '*', true)[0];
		if(!SH3DFileExtension) {
			SH3DFileExtension = Packages.org.apache.commons.io.FilenameUtils.getExtension(SH3DFile.name);
		}
		var uuidSH3DFilePath = lowPolyModelPath + GVAR_system.path_separator + modelNode.getIdentifier() + "." + SH3DFileExtension;
		var uuidSH3DFile = new Packages.java.io.File(uuidSH3DFilePath);
		Packages.org.apache.commons.io.FileUtils.moveFile(SH3DFile, uuidSH3DFile);
        
	} else {
		//TODO
	}
} catch(e) {
	Packages.java.lang.System.out.println(e);
	responseCode = responseCode || 500;
	result.put("success", false);
	result.put("reason", e.message);
	resultString = "<html><body><textarea>" + result.toString() + "</textarea></body></html>";

	if(modelNode) {
		modelNode.remove();
		currentNode.save();
	}
} finally {
	if(responseCode && responseCode !== 200) {
		response.sendError(responseCode, resultString);
	} else {
		result.put("success", true);
		resultString = "<html><body><textarea>" + result.toString() + "</textarea></body></html>"
		out.println(resultString);
	}	
}

function generateRandomNodeName(pre, suf) {
	var prefix = pre || "";
	var suffix = suf || "";

	var date = new Date();
	var dateFormat = new Packages.java.text.SimpleDateFormat('yyyyMMddhhmmssSS');
	var modelNodeName = prefix + dateFormat.format(date).toString() + Math.ceil(Math.random() * 9999) + suffix;

	return modelNodeName;	
}

%>