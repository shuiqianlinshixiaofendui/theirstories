<%

/* 
 *  This file is part of the SPP(Superpolo Platform).
 *  Copyright (C) by SanPolo Co.Ltd.
 *  All rights reserved.
 *
 *  See http://spp.spolo.org/ for more information.
 *
 *  SanPolo Co.Ltd
 *  http://spp.spolo.org/
 *  Any copyright issues, please contact: copr@spolo.org
 */

response.setCharacterEncoding("UTF-8");
response.setContentType("text/html");

var GVAR_LoadLibrary = true;
load("/apps/util/sysconfig.esp");

load("/apps/util/publishmodel.esp");

load("/apps/util/copynodeproperties.esp");

//获取并设置所需全局变量
var GVAR_CurrentNode;
var GVAR_Session;
var GVAR_WorkSpace;
var GVAR_RootNode;
var previewLibSceneNode ;
var isPublishModel = "True" ;
var publishAuthor;
var isPublishByUser = false;

var targetNode;
GVAR_CurrentNode = currentNode;

publishAuthor = currentNode.getSession().getUserID();


//判断发布位置，确定是否切换到管理员身份
function changeToAdmin(){
	var slingRepos = sling.getService(Packages.org.apache.sling.jcr.api.SlingRepository);
	var adminSession = slingRepos.loginAdministrative(null);
	GVAR_Session = adminSession;
	GVAR_WorkSpace = GVAR_Session.getWorkspace();
	GVAR_RootNode = GVAR_Session.getRootNode();
}

//判断/previewlib/scenexxx节点是不是存在.
function checkContentPreviewLibSceneNodeExists(){
	var sceneNodeName = GVAR_CurrentNode.getName();
	var previewLibNode ; 
	//判断有没有/content/previewlib节点
	if (GVAR_RootNode.hasNode("content/previewlib")){
		previewLibNode = GVAR_RootNode.getNode("content/previewlib");
	}else{
		previewLibNode = GVAR_RootNode.addNode("content/previewlib");
		//设置sling:resourceType属性为folder,便于查询
		previewLibNode.setProperty("sling:resourceType" , "folder");
		GVAR_Session.save();
	}
	//判断有没有/content/previewlib/scenexxxx节点
	if (previewLibNode.hasNode(sceneNodeName)){
		previewLibSceneNode = previewLibNode.getNode(sceneNodeName);
	}else{
		previewLibSceneNode = previewLibNode.addNode(sceneNodeName);
		//设置sling:resourceType属性为folder,便于查询
		previewLibSceneNode.setProperty("sling:resourceType" , "folder");
		
		GVAR_Session.save();
		
		copyNodeProperties(currentNode,previewLibSceneNode);
		
		GVAR_Session.save();
	}
}	
	
//复制预览图到指定路径
function copyNodeToTagetNode(isPublishModel){
	var publishMessage = "";
	var previewNodes = GVAR_CurrentNode.getNodes();
	for(var index = 0 ; index<previewNodes.length ; index++){
		var previewNode = previewNodes[index];
		//获取目标路径信息。
		var previewName = previewNode.getName();
		if(previewLibSceneNode.hasNode(previewName)){
			publishMessage = "this preview has published";
		}else{
			var targetPath = previewLibSceneNode.getPath()+"/" + previewName;
			//获取mime map service.
			var mimeService = sling.getService(Packages.org.apache.sling.commons.mime.MimeTypeService); 
			//var targetNode;

			//复制节点
			GVAR_WorkSpace.copy(previewNode.getPath(),targetPath);
			GVAR_RootNode.save();
			targetNode = GVAR_RootNode.getNode(targetPath.substring(1,targetPath.length));
			
			var tarnodePath = GVAR_system.getNodePath(targetNode,true);
			var srcnodePath = GVAR_system.getNodePath(previewNode,true);
			
			var srcfile = new Packages.java.io.File(srcnodePath);
			var tarfile = new Packages.java.io.File(tarnodePath);
			
			Packages.org.apache.commons.io.FileUtils.copyDirectory(srcfile,tarfile);
			Packages.java.lang.System.out.println("publish preview copy files from " + srcnodePath + " to " + tarfile);
			
			var publishdate = new Date();
			var year = publishdate.getFullYear();
			var month = publishdate.getMonth();
			var date = publishdate.getDate();
			var hours = publishdate.getHours();
			var minutes = publishdate.getMinutes();
			var seconds = publishdate.getSeconds();
			var calendar = new Packages.java.util.Calendar.getInstance();
			calendar.set(year,month,date,hours,minutes,seconds);
			
			previewLibSceneNode.setProperty("publishdate", calendar);
			previewLibSceneNode.setProperty("publishAuthor", publishAuthor);
			previewLibSceneNode.save();
			
			//判断是否发布模型
			if(isPublishModel == "True"){
				try
				{
					publishModel(targetNode);
				}catch(e)
				{
					out.println("publishModel error : " + e);
					response.flushBuffer();
				}
				
				
				isPublishModel = "False";
			}
			
			GVAR_Session.save();
			publishMessage = "success";
		}
		
	}
		
	GVAR_CurrentNode.setProperty("isPublished" , "true");
	GVAR_CurrentNode.save();
	
	return publishMessage ; 
}

//获取模型名称
function getModelName(){
	var modelName = "model";
	var date = new Date();
	modelName += ""+date.getFullYear()+date.getMonth()+date.getDate()+date.getHours()+date.getMinutes()+date.getSeconds()+date.getMilliseconds();
	var num = Math.ceil(Math.random()*10000000);
	modelName+=""+ num ;
	return modelName;
}

//发布模型
function publishModel(targetNode){
	//发布模型信息
	var modelNode = targetNode.getNode("model");
	var modelNodes = modelNode.getNodes();
	for(var i = 0; i < modelNodes.length; i++)
	{
		var childNode = modelNodes[i];
		var modelPath = childNode["modelpath"];
		var modelName = getModelName();
		var targetPath = "/content/modellib/" + modelName ;

		try
		{
			publishmodel(modelPath,targetPath)
			childNode.setProperty("modelpath" , targetPath);
			childNode.save();
		}catch(e)
		{
			var tarnode = GVAR_RootNode.getNode(targetPath.substring(1,targetPath.length));
			if(tarnode != null)
			{
				tarnode.remove()
				GVAR_Session.save();
			}
			response.setCharacterEncoding("UTF-8");
			out.println("publishmodel error : " + e);
			out.println("modelpath ： " + modelPath);
			out.println("targetPath ： " + targetPath);
			response.flushBuffer();
		}
		
		
	}

}

// 请求一个URL并获取结果
function forward(path)
{
     var dispOption = new Packages.org.apache.sling.api.request.RequestDispatcherOptions();
     var disp = request.getRequestDispatcher(path,dispOption);
     var cache_response = new Packages.org.spolo.utils.BufferedServletResponse(response);
     disp.forward(request,cache_response);
	 return cache_response;
}

//发布预览图
function publishPreview(){
	
	try
	{
		changeToAdmin();
	}catch(e)
	{
		out.println("changeToAdmin error : " + e);
		response.flushBuffer();
	}
	
	
	try
	{
		checkContentPreviewLibSceneNodeExists();
	}catch(e)
	{
		out.println("checkContentPreviewLibSceneNodeExists error : " + e);
		response.flushBuffer();
	}
	
	//获取请求参数,判断是否发布模型.
	try
	{
		isPublishModel  = request.getRequestParameter("isPublishModel");
	}catch(e)
	{
		out.println("request.getRequestParameter(\"isPublishModel\") error : " + e);
		response.flushBuffer();
	}
	
	//默认为True
	if(isPublishModel == null){
		isPublishModel = "True" ; 
	}
	
	var message;
	
	try
	{
		message = copyNodeToTagetNode(isPublishModel);
	}catch(e)
	{
		out.println("copyNodeToTagetNode error : " + e);
		response.flushBuffer();
	}
	
	var isPublishByUser;
	
	try
	{
		isPublishByUser = request.getRequestParameter("isPublishModel");
	}catch(e)
	{
		out.println("request.getRequestParameter(\"isPublishModel\") error : " + e);
		response.flushBuffer();
	}
	
	if(isPublishByUser==null || isPublishByUser=="True"){
		
		
		try
		{
			fixModelPath();
		}catch(e)
		{
			out.println("fixModelPath error : " + e);
			response.flushBuffer();
		}
	}
	
	out.println(message);
}


// 修正每个模型的地址为公共模型库
function fixModelPath(){
	var path = previewLibSceneNode.getPath();
	var scene = GVAR_Session.getNode(path);
	var previewList = scene.getNodes();
	var modelList = previewList[0].getNode("model").getNodes();
	
	for(var i=0; i<previewList.length; i++){
		var preview = previewList[i];
		setModelsName(modelList, preview);
		GVAR_Session.save();
	}
}

function setModelsName(data, pre){
	var ml = pre.getNode("model").getNodes();
	var name;
	for(var i=0;i< ml.length; i++){
		name = ml[i].getName();
		ml[i].setProperty("modelpath", data[name]["modelpath"]);
	}
}

try
{
	publishPreview();
}catch(e)
{
	out.println("publishPreview error : " + e);
	response.flushBuffer();
}

%>