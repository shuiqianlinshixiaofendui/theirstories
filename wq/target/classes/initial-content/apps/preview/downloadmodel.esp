<%
/* 
 *  This file is part of the SPP(Superpolo Platform).
 *  Copyright (C) by SanPolo Co.Ltd.
 *  All rights reserved.
 *
 *  See http://spp.spolo.org/ for more information.
 *
 *  SanPolo Co.Ltd
 *  http://spp.spolo.org/
 *  Any copyright issues, please contact: copr@spolo.org
 */

response.setCharacterEncoding("UTF-8");

var GVAR_LoadLibrary = true;
load("/apps/util/sysconfig.esp");
load("/apps/util/file.esp")

try {

	//用来存放模型目录的数组，方便之后打包
	//var arrayObj = new Array();
	//获取preview model节点下所有的节点
	var modelNode = currentNode.getNode("model");
	//var nodePath = GVAR_system.getNodePath(currentNode,false);
	var models = modelNode.getNodes();

	if(GVAR_system.getNodePath(currentNode,false)){

		//确定压缩包名字
		var zipName = currentNode.getParent().resourceName;
		zipName = new Packages.java.net.URLEncoder.encode(zipName, "UTF-8")
		//out.println(zipName);

		//确定拷贝到 preview下的cache下的model目录
		var previewPath = GVAR_system.getNodePath(currentNode, false);
		var previewCachePath = previewPath + GVAR_system.path_separator + "cache";
		var previewCacheModelPath = previewCachePath + GVAR_system.path_separator + "model";
		var previewCacheDir = new Packages.java.io.File(previewCachePath);
		var previewCacheModelDir = new Packages.java.io.File(previewCacheModelPath);

		//压缩包的位置
		var zipPath = previewCachePath + GVAR_system.path_separator + zipName + ".zip";
		var zipFile = new Packages.java.io.File(zipPath);
		//out.println(zipPath);
		response.setContentType("application/zip");

		if (!request.getParameter("attach")) {
			response.setHeader("Content-Disposition", "attachment; filename=\"" + zipName + ".zip\"");
		}

		if (!zipFile.exists()){

			//检查cache是否存在，不存在就创建一个
			if (!previewCacheDir.exists()){

				previewCacheDir.mkdirs();

			}else{
				//检查cache下的model是否存在，不存在就创建一个
				if (!previewCacheModelDir.exists()){

					previewCacheModelDir.mkdirs();
				}
			}
			//得到节点对应的模型目录
			for (var i = 0; i < models.length; i++) {

				var path = models[i].modelpath;
				var modelName = models[i].resourceName;
				var rootNode = currentNode.getAncestor(0);

				if (path[0] == '/') {
					path = path.substring(1);
				}

				var dstNode = rootNode.getNode(path)
				var dstDataDir = new Packages.java.io.File(GVAR_system.getNodePath(dstNode, false) + GVAR_system.path_separator + "data");
				//out.println(dstDataDir);
				//var dstFilePath = GVAR_system.getNodePath(dstNode, false);
				
		
				/*
				//得到八级目录下的data目录
				var dataPath = dstFilePath + GVAR_system.path_separator + "data";
				var dataDir = new Packages.java.io.File(dataPath);

				//得到目录，把这些目录加入到一个数组中

				if (dataDir.exists()) {
					arrayObj.push(dataDir);
				} else {
					throw Packages.java.io.FileNotFoundException("Can not find " + dataDir);
				}
				*/

				//拷贝这些目录，以及目录下的文件，并且以resourceName命名。
				Packages.org.apache.commons.io.FileUtils.copyDirectory(dstDataDir, Packages.java.io.File(previewCacheModelPath + GVAR_system.path_separator + modelName));

			}
			
			/*
			
			for (var i = 0; i < arrayObj.length; i++) {
			 	//out.println(arrayObj[i]);
				var files = GVAR_File.listFiles(arrayObj[1], "*", true);
			}
			*/
			//打包
			if (!GVAR_system.hasTool("7za")) {
				var files = GVAR_File.listFiles(previewCacheModelDir, "*", true);
				var zos = new Packages.java.io.FileOutputStream(zipFile);
				GVAR_File.zipFiles(zos, files);
			} else {
				GVAR_system.runTool("7za", ["-mcu=on", "a " + zipPath + " " + previewCacheModelPath + GVAR_system.path_separator + "*"]);
			}
		}
		Packages.org.apache.commons.io.FileUtils.forceDelete(previewCacheModelDir);
		var inputstream = new Packages.java.io.FileInputStream(zipFile);
		Packages.org.apache.commons.io.IOUtils.copyLarge(inputstream, response.getOutputStream());

	}else{
		throw Packages.java.io.FileNotFoundException("Can not find " + dstDataDir);
	}
} catch (FileNotFoundException) {
	response.sendError(404, FileNotFoundException.message);
}
%>